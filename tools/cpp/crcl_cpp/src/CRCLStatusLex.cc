
#line 3 "/home/isd/proctor/test_ws/src/crcl/tools/cpp/crcl_cpp/src/CRCLStatusLex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 114
#define YY_END_OF_BUFFER 115
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1019] =
    {   0,
      112,  112,    0,    0,    5,    5,    6,    6,  115,  113,
      112,  112,  113,  113,  110,  113,  113,  113,    2,    3,
        2,    5,  114,    6,    7,    6,    8,  112,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
       45,   49,   63,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   99,  101,  105,   10,    0,    0,    0,
        0,    5,    6,    7,    6,    0,  111,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    4,    0,    1,
        0,    0,    0,    0,    0,    0,    0,    0,   44,    0,
        0,   48,    0,    0,   62,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   98,
        0,    0,  100,    0,  104,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   71,    0,    0,   79,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   39,    0,    0,    0,    0,    0,    0,
        0,   75,    0,    0,    0,    0,    0,    0,   91,    0,
        0,   97,  103,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   70,    0,    0,    0,   78,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   69,    0,    0,    0,    0,    0,    0,    0,    0,
       95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   38,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   74,    0,    0,    0,    0,
        0,    0,    0,   90,    0,    0,    0,   96,    0,  102,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   68,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   94,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   87,    0,    0,    0,    9,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   19,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   47,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   89,   93,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   86,    0,    0,    0,   17,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   67,    0,   77,    0,    0,   85,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       18,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   46,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   88,    0,   92,    0,
        0,   25,    0,    0,    0,    0,    0,    0,   41,    0,
       51,    0,   55,    0,    0,    0,    0,    0,    0,    0,
       13,    0,    0,    0,    0,    0,    0,    0,   16,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   66,    0,    0,   76,
        0,    0,    0,   84,    0,   21,    0,   27,    0,   31,

        0,   35,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   24,    0,    0,    0,    0,    0,    0,    0,   40,
        0,    0,   50,    0,    0,   54,    0,    0,    0,    0,
        0,    0,    0,    0,   23,    0,    0,    0,   43,   53,
       57,    0,   61,    0,    0,    0,   83,    0,    0,    0,
        0,    0,    0,    0,   20,    0,    0,   26,    0,    0,
       30,    0,    0,   34,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   65,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   22,

        0,    0,    0,    0,   42,    0,   52,    0,   56,    0,
        0,   60,    0,    0,    0,    0,   82,   15,   29,   33,
       37,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   64,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   14,    0,   28,
        0,   32,    0,   36,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   59,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   58,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   81,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   80,    0,    0,    0,    0,    0,    0,    0,
       73,    0,    0,    0,    0,    0,    0,    0,    0,   12,
        0,    0,    0,    0,   72,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      108,    0,    0,    0,    0,  106,    0,    0,    0,    0,

        0,    0,  107,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  109,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    8,    9,   10,   11,   12,
       13,    1,    1,    1,    1,    1,    1,   14,    1,   15,
       16,   17,   18,    1,   19,    1,   20,   21,    1,   22,
       23,    1,   24,   25,   26,   27,   28,   29,   30,   31,
        1,   32,   33,   34,   35,   36,   37,   38,   39,   40,
        1,    1,    1,    1,    1,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,    1,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    2,    1,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1026] =
    {   0,
        0,    5,    7,    9, 1385, 1384,   22,   25, 1398, 1401,
       28,   31,    0,   93, 1401, 1380, 1343,    0, 1401, 1401,
     1388,    0, 1401,    0,   45,   51, 1401,   71, 1389, 1335,
     1386,   33, 1384,  133, 1401, 1337,    7, 1344,    8, 1331,
     1329, 1332, 1401,   10, 1331, 1343, 1326, 1328, 1336,   11,
       16, 1325, 1322, 1359, 1401, 1358, 1401, 1333, 1324, 1325,
     1356,    0,    0,   77,   80, 1323, 1401, 1364,    0, 1317,
       12, 1324,   18, 1311,   86,  172,  175,   22, 1313, 1325,
     1308, 1310, 1318,   40,   38, 1307, 1304,  178,  181,  184,
     1313, 1339, 1306, 1299, 1303, 1298, 1305, 1322, 1303, 1298,

     1288, 1297, 1296, 1298,   11, 1300, 1290, 1303, 1291, 1293,
     1286, 1295, 1276, 1275, 1283,   39, 1322, 1401, 1321, 1401,
     1287, 1313, 1280, 1273, 1277, 1272, 1279,  202, 1401, 1296,
      205, 1401, 1277,  208, 1401, 1272, 1262, 1271, 1270, 1272,
       52, 1274, 1264, 1277, 1265, 1267, 1260, 1269,  211, 1401,
     1250,  214, 1401,  230, 1401, 1249, 1251, 1283, 1257, 1265,
     1260, 1263, 1250, 1250, 1250, 1257, 1256, 1255, 1254, 1253,
     1244,   59, 1266, 1254, 1235, 1248, 1234, 1246, 1237, 1240,
     1239, 1243,  138, 1228,   86, 1226, 1224, 1256, 1230, 1238,
     1233, 1236, 1223, 1223, 1223, 1230, 1229, 1228, 1227, 1226,

     1217,   60, 1239, 1227, 1208, 1221, 1207, 1219, 1210, 1213,
     1212, 1209, 1226, 1217, 1200, 1211, 1210, 1199, 1191, 1193,
     1210, 1193, 1196, 1401, 1195, 1188, 1213, 1186, 1202, 1186,
     1182, 1183, 1181, 1182, 1195, 1179, 1178, 1186, 1189, 1219,
     1178, 1167, 1179, 1196, 1187, 1170, 1181, 1180, 1169, 1161,
     1163, 1180, 1163, 1166,  233, 1165, 1158,  236, 1157, 1173,
     1157, 1153, 1154, 1152, 1153, 1166, 1150, 1149, 1165, 1146,
     1151, 1154, 1145, 1401, 1156, 1155,  212, 1142, 1166, 1138,
     1137, 1401, 1136, 1145, 1143, 1151, 1133, 1131, 1401, 1162,
     1140, 1401, 1401, 1134, 1129, 1122, 1155, 1128, 1141, 1122,

     1127, 1130, 1121,  253, 1132, 1131,  229, 1118, 1142, 1114,
      264, 1401, 1113,  269,  272, 1401, 1112, 1121, 1119, 1127,
     1109, 1107,  275, 1138, 1116,  280,  291, 1106, 1121, 1117,
     1105,  130, 1102, 1101, 1097, 1102, 1096, 1100, 1108, 1116,
     1102, 1401, 1109, 1108, 1094, 1102, 1087, 1121, 1103, 1098,
     1401, 1095, 1083, 1082, 1098, 1093, 1080, 1095, 1091, 1079,
      135,  296, 1401, 1076, 1075, 1071, 1076, 1070, 1074, 1082,
     1090, 1076,  299, 1083,  302, 1401, 1082, 1068, 1076, 1061,
     1095, 1077,  307, 1401, 1072,  318,  323, 1401,  326, 1401,
     1080, 1056,  105, 1055,  169,  171,  198,  161, 1068, 1060,

     1053, 1069, 1052, 1057, 1062, 1059, 1046, 1045, 1050, 1059,
     1052, 1079, 1047, 1052,  329, 1048, 1047, 1043,  334, 1058,
     1034,  197, 1033,  220,  230,  265,  194, 1046, 1038, 1031,
     1047, 1030, 1035, 1040, 1037,  344, 1401, 1024, 1023, 1028,
     1037, 1030, 1057, 1025, 1030,  349, 1401, 1030, 1014, 1052,
     1013, 1022, 1016, 1015, 1014, 1013, 1012, 1011, 1023, 1004,
     1018, 1019, 1011, 1000, 1002, 1003, 1005, 1007, 1005,  993,
     1019,  992,  996, 1401,  994,  989,  352, 1401,  993,  355,
     1001,  360,  371, 1000,  984, 1022,  983,  992,  986,  985,
      984,  983,  982,  981,  993,  974,  988,  989,  981,  970,

      972,  973,  975,  977,  975,  963,  989,  962,  966,  376,
      964,  959,  966,  958, 1401,  974,  960,  956,  954,  954,
      952,  952,  950,  955,  965, 1401,  960,  945,  943,  942,
      958,  946,  940,  944,  939,  937,  966,  941, 1401, 1401,
      940,  379,  382,  934,  388,  254,  940,  932,  394,  948,
      934,  930,  928,  928,  926,  926,  924,  929,  939,  397,
      934,  919,  917,  916,  932,  920,  914,  918,  913,  911,
      940,  915,  400, 1401,  403,  406,  913, 1401,  907,  912,
      921,  914,  919,  912,  917,  910,  913,  898,  899,  906,
      896,  908,  903,  908, 1401,  897, 1401,  908,  907, 1401,

      422,  425,  899,  891,  904,  896,  902,  888,  430,  433,
     1401,  882,  887,  896,  889,  894,  887,  892,  885,  888,
      873,  437, 1401,  874,  881,  871,  883,  878,  883,  440,
      872,  449,  883,  882,  456,  459, 1401,  465, 1401,  879,
      199, 1401,  876,  861,  874,  859,  872,  857, 1401,  855,
     1401,  860,  868,  882,  852,  861,  876,  855,  855,  468,
     1401,  847,  864,  847,  845,  853,   34,  475, 1401,  204,
      483,   48,   47,   62,   90,  105,   92,  486,  109,  491,
      142,  494,  194,  195,  231,  502, 1401,  258,  510, 1401,
      254,  260,  513, 1401,  265, 1401,  257, 1401,  268, 1401,

      269, 1401,  274,  276,  286,  283,  285,  280,  290,  301,
      321,  322,  310,  327,  331,  342,  329,  363,  518,  355,
      521, 1401,  529,  366,  538,  367,  541,  369,  545, 1401,
      361,  548, 1401,  368,  557, 1401,  364,  373,  381,  387,
      389,  405,  410,  397, 1401,  410,  411,  420, 1401, 1401,
     1401,  453, 1401,  416,  440,  442, 1401,  436,  454,  450,
      457,  447,  450,  564, 1401,  567,  573, 1401,  456,  576,
     1401,  464,  583, 1401,  472,  592,  595,  599,  506,  602,
      465,  493,  495,  611,  473,  500,  501,  503,  503, 1401,
      510,  507,  558,  540,  531,  561,  536,  525,  618, 1401,

      538,  539,  554,  621, 1401,  627, 1401,  630, 1401,  554,
      637, 1401,  646,  557,  554,  649, 1401, 1401, 1401, 1401,
     1401,  560,  574,  582,  618,  593,  592,  593,  620,  653,
      656,  665,  672,  588,  675, 1401,  602,  617,  619,  623,
      644,  662,  624,  629,  628,  626,  682, 1401,  691, 1401,
      694, 1401,  698, 1401,  644,  647,  669,  646,  646,  659,
      643,  661,  684,  662,  661,  667,  656,  669, 1401,  672,
      656,  656,  667,  663,  676,  667,  721,  682,  666,  707,
      680,  668,  690,  683,  676,  679,  733, 1401,  718,  691,
      696,  701,  735,  717,  690,  723,  702,  703,  708,  690,

      693,  691,  700,  700,  699,  700,  697,  700,  711,  712,
      749,  720,  719,  716,  733,  718,  719,  728,  716,  763,
      731,  716,  719,  716,  735,  723,  719,  726,  726,  722,
      749,  728,  743,  726,  733,  738, 1401,  731,  740,  731,
      746,  733,  744,  792,  743,  751,  745,  759,  744,  742,
      749,  802, 1401,  754,  799,  757,  752,  779,  755,  761,
     1401,  803,  814,  760,  762,  788,  821,  816,  825, 1401,
      773,  791,  769,  832, 1401,  827,  805,  781,  787,  832,
      780,  785,  801,  838,  793,  792,  845,  814,  808,  820,
     1401,  827,  850,  793,  831, 1401,  804,  827,  816,  819,

      857,  816, 1401,  820,  814,  826,  861,  820,  817,  813,
      813,  832,  821,  832,  831,  871, 1401, 1401,  877,  881,
      885,  889,  893,  897,  900
    } ;

static yyconst flex_int16_t yy_def[1026] =
    {   0,
     1019, 1019, 1020, 1020, 1021, 1021, 1022, 1022, 1018, 1018,
     1018, 1018, 1023, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1024, 1018, 1025, 1018, 1025, 1018, 1018, 1018, 1018,
     1023,   14, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1024, 1025, 1018, 1025, 1018, 1018, 1018,   34, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018,    0, 1018, 1018,
     1018, 1018, 1018, 1018, 1018
    } ;

static yyconst flex_int16_t yy_nxt[1466] =
    {   0,
     1018,   11,   12,   11, 1018,   13,   11,   12,   11,   20,
       13,   20, 1018,   21,   14,   21,   15,   16, 1018,   14,
     1018,   15,   16,   25,   26,   26,   25,   26,   26,   28,
       28,   28,   28,   28,   28, 1018,   27, 1018,   92,   27,
      183, 1018,   29,  122,   17,   29,   64,   64,   64,   17,
     1018,   59,   64,   65,   65,  107,   95,   60,  100,  171,
       93,   96,   18,  101,  109,  123,  125,   18,  172,  108,
      136,  126,   28,   28,   28,  137,  718,  110,   64,   64,
       64,   64,   65,   65,  143,   29,  145,  128,  128,  128,
       30,  184,  723,   30,   32,   32,   32,   33,  144,  146,

      201,   34,  129,  227,  258,  724,  725,  228,  259,  202,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,  450,   53,
       54,   55,   56,   30,   69,   69,   69,  451,  241,  183,
      395,  396,  397,  130,  242,  424,  425,  426,  726,  727,
      728,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,   84,   85,   86,  731,   87,
       88,   89,   90,  131,  131,  131,  134,  134,  134,  149,
      149,  149,  152,  152,  152,  154,  154,  154,  132,  459,
      453,  135,  455,  460,  150,  734,  151,  153,  239,  454,

      155,  456,  156,  128,  128,  128,  131,  131,  131,  134,
      134,  134,  149,  149,  149,  152,  152,  152,  129,  457,
      486,  132,  495,  738,  135,  133,  496,  150,  458,  487,
      153,  154,  154,  154,  311,  311,  311,  315,  315,  315,
      335,  489,  336,  696,  337,  338,  155,  339,  719,  312,
      490,  491,  316,  739,  362,  362,  362,  366,  697,  367,
      492,  368,  369,  720,  370,  311,  311,  311,  317,  363,
      375,  375,  375,  315,  315,  315,  383,  383,  383,  740,
      312,  387,  387,  387,  605,  376,  493,  606,  316,  607,
      741,  384,  389,  389,  389,  494,  388,  362,  362,  362,

      436,  436,  436,  375,  375,  375,  742,  390,  383,  383,
      383,  743,  363,  744,  745,  437,  746,  747,  376,  446,
      446,  446,  748,  384,  387,  387,  387,  389,  389,  389,
      477,  477,  477,  749,  447,  482,  482,  482,  750,  388,
      751,  752,  390,  753,  478,  436,  436,  436,  754,  483,
      446,  446,  446,  477,  477,  477,  542,  542,  542,  755,
      437,  482,  482,  482,  756,  447,  757,  478,  758,  759,
      543,  760,  545,  545,  545,  483,  546,  573,  573,  573,
      542,  542,  542,  602,  602,  602,  761,  603,  762,  545,
      545,  545,  574,  546,  543,  610,  610,  610,  622,  622,

      622,  573,  573,  573,  636,  636,  636,  638,  638,  638,
      611,  763,  766,  623,  769,  772,  574,  775,  776,  637,
      777,  778,  639,  660,  660,  660,  602,  602,  602,  779,
      603,  668,  668,  668,  610,  610,  610,  661,  622,  622,
      622,  686,  686,  686,  780,  781,  669,  782,  783,  611,
      689,  689,  689,  623,  784,  785,  687,  693,  693,  693,
      636,  636,  636,  786,  787,  690,  638,  638,  638,  660,
      660,  660,  694,  788,  789,  637,  668,  668,  668,  790,
      791,  639,  792,  661,  721,  721,  721,  729,  729,  729,
      793,  669,  732,  732,  732,  735,  735,  735,  794,  722,

      795,  796,  730,  686,  686,  686,  797,  733,  798,  801,
      736,  689,  689,  689,  693,  693,  693,  802,  687,  764,
      764,  764,  721,  721,  721,  803,  690,  810,  813,  694,
      767,  767,  767,  814,  765,  815,  818,  722,  737,  770,
      770,  770,  773,  773,  773,  768,  729,  729,  729,  732,
      732,  732,  819,  820,  771,  821,  822,  774,  735,  735,
      735,  730,  823,  824,  733,  764,  764,  764,  799,  799,
      799,  825,  826,  736,  767,  767,  767,  770,  770,  770,
      765,  827,  828,  800,  773,  773,  773,  829,  830,  768,
      831,  832,  771,  804,  804,  804,  806,  806,  806,  774,

      808,  808,  808,  811,  811,  811,  833,  834,  805,  837,
      838,  807,  816,  816,  816,  809,  839,  840,  812,  799,
      799,  799,  804,  804,  804,  841,  842,  817,  806,  806,
      806,  808,  808,  808,  800,  843,  844,  805,  811,  811,
      811,  845,  846,  807,  855,  856,  809,  835,  835,  835,
      816,  816,  816,  812,  847,  847,  847,  849,  849,  849,
      857,  858,  836,  859,  860,  817,  851,  851,  851,  848,
      861,  862,  850,  853,  853,  853,  835,  835,  835,  863,
      864,  852,  865,  847,  847,  847,  866,  867,  854,  868,
      869,  836,  849,  849,  849,  851,  851,  851,  848,  853,

      853,  853,  870,  871,  872,  873,  874,  850,  875,  876,
      852,  877,  878,  879,  854,  880,  881,  882,  883,  884,
      885,  886,  887,  887,  887,  889,  890,  891,  892,  893,
      894,  895,  896,  897,  887,  887,  887,  888,  898,  899,
      900,  901,  902,  903,  904,  905,  906,  907,  908,  888,
      909,  910,  911,  912,  913,  914,  915,  916,  917,  918,
      919,  920,  921,  922,  923,  924,  925,  926,  927,  928,
      929,  930,  931,  932,  933,  934,  935,  936,  937,  938,
      939,  940,  941,  942,  943,  944,  945,  946,  947,  948,
      949,  950,  951,  952,  952,  952,  954,  955,  956,  957,

      958,  959,  960,  952,  952,  952,  961,  962,  953,  963,
      964,  965,  966,  967,  968,  969,  969,  969,  953,  971,
      972,  973,  974,  974,  974,  976,  969,  969,  969,  970,
      977,  978,  979,  974,  974,  974,  980,  975,  981,  982,
      970,  983,  984,  985,  986,  987,  988,  989,  975,  990,
      991,  992,  993,  994,  995,  996,  997,  998,  999, 1000,
     1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
     1011, 1012, 1013, 1014, 1015, 1016, 1017,   10,   10,   10,
       10,   19,   19,   19,   19,   22,   22,   22,   22,   24,
       24,   24,   24,   31,   31,  717,   31,   62,   62,   62,

       63,  716,   63,  715,  714,  713,  712,  711,  710,  709,
      708,  707,  706,  705,  704,  703,  702,  701,  700,  699,
      698,  695,  692,  691,  688,  685,  684,  683,  682,  681,
      680,  679,  678,  677,  676,  675,  674,  673,  672,  671,
      670,  667,  666,  665,  664,  663,  662,  659,  658,  657,
      656,  655,  654,  653,  652,  651,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  640,  635,  634,  633,
      632,  631,  630,  629,  628,  627,  626,  625,  624,  621,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  609,
      608,  604,  601,  600,  599,  598,  597,  596,  595,  594,

      593,  592,  591,  590,  589,  588,  587,  586,  585,  584,
      583,  582,  581,  580,  579,  578,  577,  576,  575,  572,
      571,  570,  569,  568,  567,  566,  565,  564,  563,  562,
      561,  560,  559,  558,  557,  556,  555,  554,  553,  552,
      551,  550,  549,  548,  547,  544,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      517,  516,  515,  514,  513,  512,  511,  510,  509,  508,
      507,  506,  505,  504,  503,  502,  501,  500,  499,  498,
      497,  488,  485,  484,  481,  480,  479,  476,  475,  474,

      473,  472,  471,  470,  469,  468,  467,  466,  465,  464,
      463,  462,  461,  452,  449,  448,  445,  444,  443,  442,
      441,  440,  439,  438,  435,  434,  433,  432,  431,  430,
      429,  428,  427,  423,  422,  421,  420,  419,  418,  417,
      416,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  394,
      393,  392,  391,  386,  385,  382,  381,  380,  379,  378,
      377,  374,  373,  372,  371,  365,  364,  361,  360,  359,
      358,  357,  356,  355,  354,  353,  352,  351,  350,  349,
      348,  347,  346,  345,  344,  343,  342,  341,  340,  334,

      333,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  318,  314,  313,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  292,  291,  290,  289,
      288,  287,  286,  285,  284,  283,  282,  281,  280,  279,
      278,  277,  276,  275,  274,  273,  272,  271,  270,  269,
      268,  267,  266,  265,  264,  263,  262,  261,  260,  257,
      256,  255,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  244,  243,  242,  240,  238,  237,  236,  235,
      234,  233,  232,  231,  230,  229,  226,  225,  224,  223,

      222,  221,  220,  219,  218,  217,  216,  215,  214,  213,
      212,  211,  210,  209,  208,  207,  206,  205,  204,  203,
      200,  199,  198,  197,  196,  195,  194,  193,  192,  191,
      190,  189,  188,  187,  186,  185,  182,  181,  180,  179,
      178,  177,  176,  175,  174,  173,  170,  169,  168,  167,
      166,  165,  164,  163,  162,  161,  160,  159,  158,  157,
      148,  147,  142,  141,  140,  139,  138,  127,  124,  121,
      120,  119,  118,  117,  116,  115,  114,  113,  112,  111,
      106,  105,  104,  103,  102,   99,   98,   97,   94,   91,
       68,   67,   66,   33,   61,   58,   57, 1018,   23,   23,

        9, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018
    } ;

static yyconst flex_int16_t yy_chk[1466] =
    {   0,
        0,    1,    1,    1,    0,    1,    2,    2,    2,    3,
        2,    4,    0,    3,    1,    4,    1,    1,    0,    2,
        0,    2,    2,    7,    7,    7,    8,    8,    8,   11,
       11,   11,   12,   12,   12,    0,    7,   32,   37,    8,
      116,   32,   11,   71,    1,   12,   25,   25,   25,    2,
       32,   18,   26,   26,   26,   50,   39,   18,   44,  105,
       37,   39,    1,   44,   51,   71,   73,    2,  105,   50,
       78,   73,   28,   28,   28,   78,  667,   51,   64,   64,
       64,   65,   65,   65,   84,   28,   85,   75,   75,   75,
       11,  116,  672,   12,   14,   14,   14,   14,   84,   85,

      141,   14,   75,  172,  202,  673,  674,  172,  202,  141,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,  393,   14,
       14,   14,   14,   28,   34,   34,   34,  393,  185,  183,
      332,  332,  332,   75,  185,  361,  361,  361,  675,  676,
      677,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  679,   34,
       34,   34,   34,   76,   76,   76,   77,   77,   77,   88,
       88,   88,   89,   89,   89,   90,   90,   90,   76,  398,
      395,   77,  396,  398,   88,  681,   88,   89,  183,  395,

       90,  396,   90,  128,  128,  128,  131,  131,  131,  134,
      134,  134,  149,  149,  149,  152,  152,  152,  128,  397,
      422,  131,  427,  683,  134,   76,  427,  149,  397,  422,
      152,  154,  154,  154,  255,  255,  255,  258,  258,  258,
      277,  424,  277,  641,  277,  277,  154,  277,  670,  255,
      424,  425,  258,  684,  304,  304,  304,  307,  641,  307,
      425,  307,  307,  670,  307,  311,  311,  311,  258,  304,
      314,  314,  314,  315,  315,  315,  323,  323,  323,  685,
      311,  326,  326,  326,  546,  314,  426,  546,  315,  546,
      688,  323,  327,  327,  327,  426,  326,  362,  362,  362,

      373,  373,  373,  375,  375,  375,  691,  327,  383,  383,
      383,  692,  362,  695,  697,  373,  699,  701,  375,  386,
      386,  386,  703,  383,  387,  387,  387,  389,  389,  389,
      415,  415,  415,  704,  386,  419,  419,  419,  705,  387,
      706,  707,  389,  708,  415,  436,  436,  436,  709,  419,
      446,  446,  446,  477,  477,  477,  480,  480,  480,  710,
      436,  482,  482,  482,  711,  446,  712,  477,  713,  714,
      480,  715,  483,  483,  483,  482,  483,  510,  510,  510,
      542,  542,  542,  543,  543,  543,  716,  543,  717,  545,
      545,  545,  510,  545,  542,  549,  549,  549,  560,  560,

      560,  573,  573,  573,  575,  575,  575,  576,  576,  576,
      549,  718,  720,  560,  724,  726,  573,  728,  731,  575,
      734,  737,  576,  601,  601,  601,  602,  602,  602,  738,
      602,  609,  609,  609,  610,  610,  610,  601,  622,  622,
      622,  630,  630,  630,  739,  740,  609,  741,  742,  610,
      632,  632,  632,  622,  743,  744,  630,  635,  635,  635,
      636,  636,  636,  746,  747,  632,  638,  638,  638,  660,
      660,  660,  635,  748,  752,  636,  668,  668,  668,  754,
      755,  638,  756,  660,  671,  671,  671,  678,  678,  678,
      758,  668,  680,  680,  680,  682,  682,  682,  759,  671,

      760,  761,  678,  686,  686,  686,  762,  680,  763,  769,
      682,  689,  689,  689,  693,  693,  693,  772,  686,  719,
      719,  719,  721,  721,  721,  775,  689,  779,  781,  693,
      723,  723,  723,  782,  719,  783,  785,  721,  682,  725,
      725,  725,  727,  727,  727,  723,  729,  729,  729,  732,
      732,  732,  786,  787,  725,  788,  789,  727,  735,  735,
      735,  729,  791,  792,  732,  764,  764,  764,  766,  766,
      766,  793,  794,  735,  767,  767,  767,  770,  770,  770,
      764,  795,  796,  766,  773,  773,  773,  797,  798,  767,
      801,  802,  770,  776,  776,  776,  777,  777,  777,  773,

      778,  778,  778,  780,  780,  780,  803,  810,  776,  814,
      815,  777,  784,  784,  784,  778,  822,  823,  780,  799,
      799,  799,  804,  804,  804,  824,  825,  784,  806,  806,
      806,  808,  808,  808,  799,  826,  827,  804,  811,  811,
      811,  828,  829,  806,  834,  837,  808,  813,  813,  813,
      816,  816,  816,  811,  830,  830,  830,  831,  831,  831,
      838,  839,  813,  840,  841,  816,  832,  832,  832,  830,
      842,  843,  831,  833,  833,  833,  835,  835,  835,  844,
      845,  832,  846,  847,  847,  847,  855,  856,  833,  857,
      858,  835,  849,  849,  849,  851,  851,  851,  847,  853,

      853,  853,  859,  860,  861,  862,  863,  849,  864,  865,
      851,  866,  867,  868,  853,  870,  871,  872,  873,  874,
      875,  876,  877,  877,  877,  878,  879,  880,  881,  882,
      883,  884,  885,  886,  887,  887,  887,  877,  889,  890,
      891,  892,  893,  894,  895,  896,  897,  898,  899,  887,
      900,  901,  902,  903,  904,  905,  906,  907,  908,  909,
      910,  911,  912,  913,  914,  915,  916,  917,  918,  919,
      920,  921,  922,  923,  924,  925,  926,  927,  928,  929,
      930,  931,  932,  933,  934,  935,  936,  938,  939,  940,
      941,  942,  943,  944,  944,  944,  945,  946,  947,  948,

      949,  950,  951,  952,  952,  952,  954,  955,  944,  956,
      957,  958,  959,  960,  962,  963,  963,  963,  952,  964,
      965,  966,  967,  967,  967,  968,  969,  969,  969,  963,
      971,  972,  973,  974,  974,  974,  976,  967,  977,  978,
      969,  979,  980,  981,  982,  983,  984,  985,  974,  986,
      987,  988,  989,  990,  992,  993,  994,  995,  997,  998,
      999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009,
     1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1019, 1019,
     1019, 1020, 1020, 1020, 1020, 1021, 1021, 1021, 1021, 1022,
     1022, 1022, 1022, 1023, 1023,  666, 1023, 1024, 1024, 1024,

     1025,  665, 1025,  664,  663,  662,  659,  658,  657,  656,
      655,  654,  653,  652,  650,  648,  647,  646,  645,  644,
      643,  640,  634,  633,  631,  629,  628,  627,  626,  625,
      624,  621,  620,  619,  618,  617,  616,  615,  614,  613,
      612,  608,  607,  606,  605,  604,  603,  599,  598,  596,
      594,  593,  592,  591,  590,  589,  588,  587,  586,  585,
      584,  583,  582,  581,  580,  579,  577,  572,  571,  570,
      569,  568,  567,  566,  565,  564,  563,  562,  561,  559,
      558,  557,  556,  555,  554,  553,  552,  551,  550,  548,
      547,  544,  541,  538,  537,  536,  535,  534,  533,  532,

      531,  530,  529,  528,  527,  525,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  514,  513,  512,  511,  509,
      508,  507,  506,  505,  504,  503,  502,  501,  500,  499,
      498,  497,  496,  495,  494,  493,  492,  491,  490,  489,
      488,  487,  486,  485,  484,  481,  479,  476,  475,  473,
      472,  471,  470,  469,  468,  467,  466,  465,  464,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  448,  445,  444,  443,  442,  441,
      440,  439,  438,  435,  434,  433,  432,  431,  430,  429,
      428,  423,  421,  420,  418,  417,  416,  414,  413,  412,

      411,  410,  409,  408,  407,  406,  405,  404,  403,  402,
      401,  400,  399,  394,  392,  391,  385,  382,  381,  380,
      379,  378,  377,  374,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  360,  359,  358,  357,  356,  355,  354,
      353,  352,  350,  349,  348,  347,  346,  345,  344,  343,
      341,  340,  339,  338,  337,  336,  335,  334,  333,  331,
      330,  329,  328,  325,  324,  322,  321,  320,  319,  318,
      317,  313,  310,  309,  308,  306,  305,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  294,  291,  290,  288,
      287,  286,  285,  284,  283,  281,  280,  279,  278,  276,

      275,  273,  272,  271,  270,  269,  268,  267,  266,  265,
      264,  263,  262,  261,  260,  259,  257,  256,  254,  253,
      252,  251,  250,  249,  248,  247,  246,  245,  244,  243,
      242,  241,  240,  239,  238,  237,  236,  235,  234,  233,
      232,  231,  230,  229,  228,  227,  226,  225,  223,  222,
      221,  220,  219,  218,  217,  216,  215,  214,  213,  212,
      211,  210,  209,  208,  207,  206,  205,  204,  203,  201,
      200,  199,  198,  197,  196,  195,  194,  193,  192,  191,
      190,  189,  188,  187,  186,  184,  182,  181,  180,  179,
      178,  177,  176,  175,  174,  173,  171,  170,  169,  168,

      167,  166,  165,  164,  163,  162,  161,  160,  159,  158,
      157,  156,  151,  148,  147,  146,  145,  144,  143,  142,
      140,  139,  138,  137,  136,  133,  130,  127,  126,  125,
      124,  123,  122,  121,  119,  117,  115,  114,  113,  112,
      111,  110,  109,  108,  107,  106,  104,  103,  102,  101,
      100,   99,   98,   97,   96,   95,   94,   93,   92,   91,
       87,   86,   83,   82,   81,   80,   79,   74,   72,   70,
       68,   66,   61,   60,   59,   58,   56,   54,   53,   52,
       49,   48,   47,   46,   45,   42,   41,   40,   38,   36,
       33,   31,   30,   29,   21,   17,   16,    9,    6,    5,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

/*

This ignores white space outside of meaningful strings of characters.

*/

#ifdef WIN32
#include <io.h>
#define strdup _strdup
#define fileno _fileno
#define isatty _isatty
#define YY_NO_UNISTD_H
#endif
#include <string.h>          // for strdup
#include "crcl_cpp/CRCLStatusClasses.hh"
#include "crcl_cpp/CRCLStatusYACC.hh"    // for tokens, yylval, etc.

#ifndef NO_ECHO
#define ECHO_IT 1
#else
#define ECHO_IT 0
#endif
#define ECH if (ECHO_IT) ECHO

extern int yyReadData;
extern int yyReadDataList;

#define INITIAL 0
#define COMMENT 1
#define DATA 2
#define DATALIST 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
  if (yyReadData)
    {
      BEGIN(DATA);
      yyReadData = 0;
    }
  else if (yyReadDataList)
    {
      BEGIN(DATALIST);
    }

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1019 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1401 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(COMMENT); /* delete comment start */}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL); /* delete comment end */ }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL);
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{ ECH;
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{ ECH;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ yyReadDataList = 0;
                          unput('<');
			  BEGIN(INITIAL);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{ECH; return ENCODING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ECH; return ENDVERSION;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ECH; return STARTVERSION;}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{ECH; return SCHEMALOCATION;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{ECH; return XMLVERSION;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
{ECH; return ANGULARVELOCITYEND;}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
{ECH; return ANGULARVELOCITYSTART;}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{ECH; return CRCLSTATUSEND;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{ECH; return CRCLSTATUSSTART;}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{ECH; return COMMANDIDEND;}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{ECH; return COMMANDIDSTART;}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
{ECH; return COMMANDSTATEEND;}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{ECH; return COMMANDSTATESTART;}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
{ECH; return COMMANDSTATUSEND;}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{ECH; return COMMANDSTATUSSTART;}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONEND;}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONSTART;}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{ECH; return FINGER1FORCEEND;}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{ECH; return FINGER1FORCESTART;}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{ECH; return FINGER1POSITIONEND;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{ECH; return FINGER1POSITIONSTART;}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
{ECH; return FINGER2FORCEEND;}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
{ECH; return FINGER2FORCESTART;}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
{ECH; return FINGER2POSITIONEND;}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
{ECH; return FINGER2POSITIONSTART;}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{ECH; return FINGER3FORCEEND;}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{ECH; return FINGER3FORCESTART;}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
{ECH; return FINGER3POSITIONEND;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
{ECH; return FINGER3POSITIONSTART;}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
{ECH; return FORCEEND;}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
{ECH; return FORCESTART;}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{ECH; return GRIPPERNAMEEND;}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
{ECH; return GRIPPERNAMESTART;}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{ECH; return GRIPPERSTATUSEND;}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{ECH; return GRIPPERSTATUSSTART;}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
{ECH; return IEND;}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{ECH; return ISTART;}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{ECH; return ISPOWEREDEND;}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
{ECH; return ISPOWEREDSTART;}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{ECH; return JEND;}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{ECH; return JSTART;}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
{ECH; return JOINTNUMBEREND;}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{ECH; return JOINTNUMBERSTART;}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{ECH; return JOINTPOSITIONEND;}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{ECH; return JOINTPOSITIONSTART;}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{ECH; return JOINTSTATUSEND;}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{ECH; return JOINTSTATUSSTART;}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{ECH; return JOINTSTATUSESEND;}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{ECH; return JOINTSTATUSESSTART;}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{ECH; return JOINTTORQUEORFORCEEND;}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{ECH; return JOINTTORQUEORFORCESTART;}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{ECH; return JOINTVELOCITYEND;}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{ECH; return JOINTVELOCITYSTART;}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{ECH; return KEND;}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{ECH; return KSTART;}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{ECH; return LINEARVELOCITYEND;}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{ECH; return LINEARVELOCITYSTART;}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{ECH; return LOWERRIGHTEND;}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{ECH; return LOWERRIGHTSTART;}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{ECH; return MOMENTEND;}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{ECH; return MOMENTSTART;}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{ECH; return NAMEEND;}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{ECH; return NAMESTART;}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{ECH; return ORIENTATIONSTANDARDDEVIATIONEND;}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{ECH; return ORIENTATIONSTANDARDDEVIATIONSTART;}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{ECH; return POINTEND;}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
{ECH; return POINTSTART;}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{ECH; return POSESTATUSEND;}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{ECH; return POSESTATUSSTART;}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{ECH; return POSEEND;}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{ECH; return POSESTART;}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{ECH; return POSITIONSTANDARDDEVIATIONEND;}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{ECH; return POSITIONSTANDARDDEVIATIONSTART;}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTNAMEEND;}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTNAMESTART;}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{ECH; return SEPARATIONEND;}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{ECH; return SEPARATIONSTART;}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{ECH; return STATUSIDEND;}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
{ECH; return STATUSIDSTART;}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{ECH; return TIMESTAMPEND;}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{ECH; return TIMESTAMPSTART;}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{ECH; return TWISTEND;}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{ECH; return TWISTSTART;}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{ECH; return UPPERLEFTEND;}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{ECH; return UPPERLEFTSTART;}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{ECH; return WRENCHEND;}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{ECH; return WRENCHSTART;}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{ECH; return XAXISEND;}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
{ECH; return XAXISSTART;}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{ECH; return XEND;}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
{ECH; return XSTART;}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{ECH; return YEND;}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{ECH; return YSTART;}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISEND;}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISSTART;}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{ECH; return ZEND;}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{ECH; return ZSTART;}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
{ ECH; return PARALLELGRIPPERSTATUSTYPEDECL; }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{ ECH; return THREEFINGERGRIPPERSTATUSTYPEDECL; }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMGRIPPERSTATUSTYPEDECL; }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{ECH;
                                           return XMLNSPREFIX;}
	YY_BREAK
case 110:
YY_RULE_SETUP
{ECH; return ENDITEM;}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{ECH;
                            int n;
                            for (n = 1; yytext[n] != '"'; n++);
                            yytext[n] = 0;
                            yylval.sVal = strdup(yytext + 1);
                            return TERMINALSTRING;
                           }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{ECH;}
	YY_BREAK
case 113:
YY_RULE_SETUP
{ECH; return BAD;}
	YY_BREAK
case 114:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DATA):
case YY_STATE_EOF(DATALIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1019 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1019 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1018);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int yywrap()
{
  return 1;
}

