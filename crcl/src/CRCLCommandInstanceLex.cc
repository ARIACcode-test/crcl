
#line 3 "/home/isd/proctor/test_ws/src/crcl/crcl/src/CRCLCommandInstanceLex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 191
#define YY_END_OF_BUFFER 192
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2072] =
    {   0,
      189,  189,    0,    0,    5,    5,    6,    6,  192,  190,
      189,  189,  190,  190,  187,  190,  190,  190,    2,    3,
        2,    5,  191,    6,    7,    6,    8,  189,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
       47,   49,   61,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  133,  137,  145,   10,    0,    0,    0,
        0,    5,    6,    7,    6,    0,  188,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    0,    1,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   46,    0,   48,    0,
        0,   60,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  132,    0,    0,    0,  136,    0,
        0,  144,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   73,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  119,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       43,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   85,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
        0,  141,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  118,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   69,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   42,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   84,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  128,    0,
        0,    0,    0,  140,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   67,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   68,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   45,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   99,  101,  103,    0,    0,    0,    0,    0,    0,
      121,    0,  125,    0,    0,    0,    0,    0,    0,    9,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   66,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  104,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   23,

        0,    0,   31,    0,    0,    0,   39,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  111,  113,    0,
        0,  123,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   44,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   98,    0,  100,    0,  102,
        0,    0,    0,    0,    0,    0,    0,  120,    0,    0,
      124,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       29,    0,    0,    0,    0,   51,    0,    0,    0,   59,
        0,   65,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  115,  117,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   22,    0,    0,    0,   30,    0,
        0,    0,    0,   38,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  110,    0,  112,
        0,    0,    0,  122,    0,    0,    0,    0,    0,    0,

        0,    0,   27,    0,   35,   37,   41,    0,   55,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   89,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   13,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   28,    0,    0,
        0,    0,    0,   50,    0,    0,    0,    0,   58,    0,
        0,   64,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  114,    0,  116,
        0,    0,    0,    0,    0,   15,    0,    0,    0,    0,

       53,    0,    0,   71,   75,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   26,    0,    0,    0,   34,
        0,   36,    0,   40,    0,    0,   54,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   88,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   57,    0,    0,   79,    0,    0,    0,
       91,    0,    0,    0,  107,  109,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       14,    0,    0,    0,    0,    0,   52,    0,    0,    0,
       70,    0,   74,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   63,    0,    0,   83,    0,   93,
        0,   97,  127,    0,    0,  139,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   56,    0,    0,    0,   78,    0,    0,
        0,    0,   90,    0,    0,    0,    0,  106,    0,  108,
        0,    0,    0,    0,    0,   17,    0,    0,    0,    0,
        0,    0,    0,    0,  131,  135,  143,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   62,    0,    0,
        0,   82,    0,    0,   92,    0,    0,   96,    0,  126,

        0,    0,    0,  138,    0,    0,    0,    0,    0,    0,
       81,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       16,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      130,    0,  134,    0,  142,   19,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   80,    0,    0,   21,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   18,    0,    0,    0,    0,    0,    0,
       25,    0,    0,    0,   95,    0,    0,    0,    0,    0,
      149,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   20,    0,    0,    0,    0,
        0,   33,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  159,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   24,    0,    0,    0,    0,
       94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  155,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   32,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  150,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  151,  152,    0,    0,    0,
      157,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  161,    0,    0,    0,    0,  166,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  181,    0,    0,    0,    0,    0,    0,    0,   87,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  176,  177,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   86,    0,    0,
        0,  146,    0,    0,    0,    0,  156,  158,    0,    0,
        0,    0,    0,  167,    0,    0,    0,  171,    0,    0,
        0,    0,    0,  179,  180,    0,    0,    0,    0,    0,
       77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  169,    0,    0,  173,    0,    0,  178,
        0,    0,    0,    0,    0,    0,    0,   12,    0,    0,
        0,  154,  160,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   76,    0,  147,
        0,  153,  162,  163,  164,  165,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  175,  182,  183,  184,  185,    0,    0,    0,
      170,    0,    0,    0,    0,    0,    0,    0,    0,  148,
        0,    0,  174,    0,    0,    0,    0,    0,    0,    0,
      168,    0,    0,    0,    0,    0,    0,    0,    0,  172,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  186,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    8,    9,   10,   11,   12,
       13,    1,    1,    1,    1,    1,    1,   14,    1,   15,
       16,   17,   18,    1,   19,    1,   20,   21,   22,   23,
       24,    1,   25,   26,   27,   28,   29,   30,   31,   32,
        1,   33,   34,   35,   36,   37,   38,   39,   40,   41,
        1,    1,    1,    1,    1,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,    1,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    2,    1,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2079] =
    {   0,
        0,    5,    7,    9, 2561, 2560,   22,   25, 2574, 2577,
       28,   32,    0,   95, 2577, 2556, 2518,    0, 2577, 2577,
     2564,    0, 2577,    0,   46,   52, 2577,   68, 2565, 2510,
     2562,   56, 2560,  135, 2577,   13,   11,   12, 2512,   18,
     2577, 2510, 2577,   13,   32,   20, 2506,   47,   33,   34,
       51,   28, 2521,   20, 2530,   71, 2577, 2517, 2508, 2509,
     2541,    0,    0,  138,  141, 2507, 2577, 2549,    0,  128,
      144,   45, 2501,   52,  177,  181,  184,   96,   40,  117,
     2496,  147,  145,  144,  153,   93, 2511,  193,  213,  216,
     2492, 2503, 2500, 2529, 2506,  168, 2488, 2500, 2500, 2486,

     2501, 2492, 2487, 2477, 2480,  175, 2485, 2484, 2486, 2477,
      179, 2479,  184, 2473, 2472,  171, 2478, 2478, 2487, 2470,
     2477, 2470, 2460, 2460, 2468, 2467, 2457, 2465, 2464,   31,
     2504, 2577, 2503, 2577, 2456, 2467, 2464, 2493, 2470,  196,
     2452, 2464, 2464, 2450, 2465,  250, 2577,  253, 2577, 2456,
      256, 2577, 2451, 2441, 2444,  179, 2449, 2448, 2450, 2441,
      212, 2443,  216, 2437, 2436,  192, 2442, 2442, 2451, 2434,
     2441, 2434, 2424,  262, 2577, 2424, 2432,  274, 2577, 2431,
      278, 2577, 2421, 2429, 2422, 2421,  165, 2453, 2426, 2426,
     2431, 2419, 2432, 2423, 2442, 2429, 2428, 2417, 2424, 2423,

     2409, 2421, 2420, 2419, 2432, 2417, 2420, 2407, 2410, 2411,
     2427, 2402, 2410,  208, 2395, 2396, 2397, 2406, 2405, 2396,
     2395, 2388, 2401, 2390, 2395, 2394, 2393, 2392, 2391, 2395,
       91, 2380,  214, 2378, 2376, 2375,  202, 2407, 2380, 2380,
     2385, 2373, 2386, 2377, 2396, 2383, 2382, 2371, 2378, 2377,
     2363, 2375, 2374, 2373, 2386, 2371, 2374, 2361, 2364, 2365,
     2381, 2356, 2364,  250, 2349, 2350, 2351, 2360, 2359, 2350,
     2349, 2342, 2355, 2344, 2349, 2348, 2347, 2346, 2345, 2352,
     2341, 2340, 2359, 2370, 2341, 2346, 2337, 2341, 2327, 2332,
     2328, 2336, 2321, 2320, 2337, 2320, 2335, 2322, 2341, 2577,

     2319, 2319, 2319, 2311, 2310, 2311, 2325, 2309, 2306, 2321,
     2308, 2313, 2302, 2341, 2301, 2301, 2299, 2577, 2327, 2298,
     2300, 2295, 2299, 2298, 2292, 2296, 2299, 2302, 2333, 2291,
     2280, 2302, 2291, 2290, 2309, 2320, 2291, 2296, 2287, 2291,
     2277, 2282, 2278, 2286, 2271, 2270, 2287, 2270, 2285, 2272,
     2291,  283, 2269, 2269, 2269, 2261, 2260, 2261, 2275, 2259,
     2256, 2271, 2258, 2263, 2252, 2291, 2251, 2251, 2249,  286,
     2277, 2248, 2250, 2245, 2249, 2248, 2242, 2246, 2239, 2256,
     2276, 2241, 2240, 2248, 2239, 2244, 2241, 2240, 2254, 2229,
     2577, 2237,  275, 2228, 2252, 2236, 2223, 2222, 2222, 2220,

     2233, 2577, 2228, 2235, 2225, 2215, 2255, 2229, 2226, 2217,
     2238, 2214, 2208, 2225,  264, 2224, 2237, 2214, 2228, 2202,
     2201, 2225, 2199, 2204, 2199, 2192, 2225, 2198, 2193, 2210,
     2230, 2195, 2194, 2202, 2193, 2198, 2195, 2194, 2208, 2183,
      308, 2191,  283, 2182, 2206, 2190, 2177, 2176,  316, 2577,
     2176, 2174, 2187,  319, 2182, 2189, 2179, 2169, 2209, 2183,
     2180, 2171, 2192, 2168, 2162, 2179,  274,  324, 2577, 2178,
     2191, 2168,  327, 2157, 2156,  335, 2155, 2168, 2155, 2162,
     2161, 2157, 2176, 2163, 2146, 2152, 2149, 2154, 2153, 2147,
     2157, 2154, 2138, 2143, 2141, 2159, 2145, 2148, 2577, 2135,

     2142, 2149, 2130, 2134, 2135, 2141,  308, 2134, 2139, 2138,
     2135, 2127, 2127, 2138, 2125, 2134, 2121, 2123, 2129, 2120,
     2118, 2137, 2136, 2115, 2134, 2120, 2108, 2107, 2123, 2118,
     2117, 2104, 2111, 2110, 2106, 2125, 2112, 2095, 2101, 2098,
     2103, 2102,  344, 2577, 2096, 2106, 2103, 2087, 2092, 2090,
     2108, 2094, 2097,  347, 2084, 2091, 2098, 2079,  351, 2577,
     2083, 2084, 2090,  328, 2083, 2088, 2087, 2084, 2076, 2076,
     2087, 2074, 2083, 2070, 2072, 2078, 2069,  354, 2577, 2067,
     2086, 2085,  370, 2577, 2064, 2083, 2091, 2079, 2056, 2060,
     2060, 2070, 2086, 2052, 2067, 2048, 2054, 2046, 2051, 2060,

     2043, 2049, 2042, 2054, 2053, 2050, 2577, 2055, 2036, 2035,
     2048, 2039, 2057, 2047, 2035, 2034, 2042, 2035, 2034, 2040,
     2577, 2025, 2038, 2029, 2037, 2036, 2032, 2026,   64,   59,
       96,   95,   97,  154,  154,  373,  189,  196,  239,  376,
      271,  262,  242,  252,  261,  274,  299,  274,  292,  275,
      289,  299,  312,  323,  309,  328,  323,  337,  338,  337,
      391,  394, 2577,  344,  328,  330,  345,  345,  365,  357,
      347,  348,  358,  353,  354,  362,  410,  350,  365,  362,
      372,  373,  372,  373,  373,  361,  370,  368,  369,  373,
      371,  373,  383,  370,  371,  390,  373,  413,  389,  376,

      387,  392,  389, 2577,  394,  399,  399,  393,  398,  393,
      397,  397,  398,  399,  392,  417,  406,  393,  395,  397,
      404, 2577, 2577, 2577,  407,  408,  403,  414,  415,  416,
     2577,  403, 2577,  418,  413,  414,  421,  416,  467, 2577,
      417,  471,  430,  475,  478,  430,  440,  428,  429,  448,
      432,  472,  448,  435,  446,  451,  448,  497,  456,  461,
      461,  455,  460,  455,  459,  507, 2577,  462,  463,  465,
      458,  483,  472,  459,  461,  463,  470,  523,  526,  529,
      532, 2577,  473,  487,  482,  493,  495,  496,  548,  484,
      551,  499,  495,  496,  510,  505,  508,  507,  518, 2577,

      507,  516, 2577,  537,  518,  511, 2577,  512,  517,  520,
      525,  512,  528,  519,  515,  528,  522,  523,  549,  520,
      517,  552,  534,  528,  532,  528,  529, 2577, 2577,  538,
      546, 2577,  534,  547,  548,  537,  550,  543,  596,  599,
      545,  604,  594,  559,  559,  575,  628,  567,  576,  631,
      598,  590,  582,  636,  586,  640, 2577,  594,  597,  603,
      590,  606,  597,  594,  607,  601,  603,  629,  600,  597,
      632,  614,  608,  612,  666, 2577,  669, 2577,  672, 2577,
      617,  618,  677,  688,  630,  639,  693, 2577,  696,  699,
     2577,  627,  641,  642,  635,  658,  652,  652,  654,  664,

     2577,  656,  667,  660,  661, 2577,  665,  660,  669, 2577,
      676, 2577,  672,  668,  669,  682,  679,  684,  685,  668,
      687,  670,  670,  688,  683,  684, 2577, 2577,  693,  678,
      679,  696,  681,  738,  741,  697,  692,  705,  698,  688,
      698,  709,  702,  702,  712,  703,  705,  708,  715,  706,
      711,  711,  714,  768, 2577,  728,  774,  777, 2577,  719,
      737,  729,  784, 2577,  730,  793,  737,  732,  742,  796,
      749,  800,  756,  752,  753,  766,  763,  769,  770,  754,
      773,  756,  757,  775,  770,  771,  820, 2577,  823, 2577,
      826,  829,  832, 2577,  796,  781,  783,  800,  786,  785,

      803,  804,  825,  801, 2577, 2577, 2577,  793, 2577,  798,
      804,  795,  797,  823,  805,  799,  808,  807, 2577,  809,
      813,  818,  815,  811,  812,  814,  827,  828,  817,  830,
      871, 2577,  816,  835,  818,  824,  826,  835,  837,  823,
      834,  835,  827,  843,  827,  844,  832,  832,  839,  834,
      840,  854,  837,  854,  855,  898,  901, 2577,  856,  905,
      908,  917,  924, 2577,  854,  927,  859,  933, 2577,  866,
      936, 2577,  857,  865,  898,  880,  882,  891,  891,  944,
      896,  901,  906,  904,  900,  901,  955, 2577,  960, 2577,
      906,  923,  924,  913,  926, 2577,  919,  924,  917,  919,

     2577,  920,  915, 2577, 2577,  916,  932,  919,  919,  936,
      936,  928,  953,  925,  932,  933,  944,  935,  936,  947,
      938,  933,  950,  934,  937,  950,  946,  979,  966,  941,
      948,  944,  959,  959,  952,  961,  989,  977,  991,  955,
      958, 1025,  965,  971, 1028, 2577,  964,  967, 1031, 2577,
     1034, 2577, 1037, 2577, 1053, 1056, 2577,  968,  965, 1059,
     1062,  983,  998,  986,  986, 1004, 1065, 2577, 1004,  997,
     1022, 1011, 1018, 1020, 1031, 1023, 1024, 1036, 1027, 1023,
     1061, 1026, 1026, 2577, 1022, 1046, 2577, 1039, 1044, 1049,
     2577, 1038, 1035, 1029, 2577, 2577, 1050, 1053, 1054, 1053,

     1056, 1045, 1056, 1061, 1058, 1055, 1054, 1065, 1048, 1089,
     1050, 1069, 1060, 1079, 1080, 1097, 1073, 1062, 1061, 1066,
     1067, 1067, 1069, 1078, 1070, 1071, 1072, 1099, 1070, 1129,
     2577, 1074, 1113, 1076, 1077, 1136, 2577, 1139, 1079, 1146,
     2577, 1155, 2577, 1103, 1158, 1101, 1106, 1112, 1162, 1101,
     1109, 1103, 1167, 1174, 1127, 1130, 1136, 1135, 1138, 1118,
     1127, 1142, 1127, 1155, 2577, 1135, 1136, 2577, 1134, 2577,
     1170, 2577, 2577, 1148, 1149, 2577, 1150, 1183, 1164, 1139,
     1165, 1153, 1167, 1149, 1162, 1163, 1183, 1159, 1162, 1165,
     1161, 1156, 1158, 1169, 1168, 1160, 1170, 1174, 1162, 1161,

     1168, 1163, 1181, 1167, 1184, 1172, 1209, 1164, 1172, 1187,
     1172, 1200, 1232, 2577, 1235, 1186, 1242, 2577, 1188, 1251,
     1189, 1254, 2577, 1258, 1225, 1261, 1270, 2577, 1277, 2577,
     1280, 1204, 1205, 1286, 1220, 2577, 1221, 1211, 1228, 1230,
     1232, 1237, 1241, 1236, 2577, 2577, 2577, 1283, 1249, 1249,
     1241, 1237, 1234, 1245, 1241, 1248, 1249, 1249, 1260, 1287,
     1250, 1251, 1275, 1256, 1267, 1267, 1268, 1267, 1264, 1295,
     1274, 1273, 1272, 1271, 1267, 1304, 1267, 1271, 1266, 1284,
     1273, 1328, 1287, 1276, 1293, 1290, 1337, 2577, 1292, 1294,
     1344, 2577, 1298, 1347, 2577, 1289, 1353, 2577, 1356, 2577,

     1363, 1372, 1375, 2577, 1379, 1306, 1307, 1308, 1307, 1326,
     2577, 1348, 1313, 1363, 1335, 1359, 1331, 1329, 1332, 1336,
     1330, 1338, 1336, 1349, 1362, 1343, 1353, 1345, 1336, 1350,
     1369, 1352, 1360, 1348, 1361, 1361, 1354, 1364, 1353, 1352,
     1358, 1354, 1371, 1360, 1356, 1359, 1369, 1376, 1375, 1420,
     2577, 1379, 1380, 1373, 1372, 1387, 1428, 1412, 1376, 1436,
     2577, 1439, 2577, 1444, 2577, 2577, 1372, 1392, 1389, 1391,
     1404, 1407, 1389, 1408, 1400, 1405, 1412, 1413, 1425, 1403,
     1409, 1420, 1419, 1401, 1414, 1405, 1408, 1414, 1451, 1426,
     1454, 1455, 1433, 1440, 1430, 1419, 1443, 1427, 1432, 1428,

     1451, 1440, 1439, 1440, 1470, 1435, 1445, 1446, 1491, 1433,
     1453, 1443, 1441, 1498, 2577, 1457, 1461, 2577, 1460, 1449,
     1464, 1448, 1465, 1449, 1460, 1464, 1496, 1491, 1512, 1454,
     1485, 1486, 1476, 1478, 1468, 1472, 1491, 1479, 1482, 1480,
     1470, 1488, 1486, 1490, 1488, 1482, 1482, 1491, 1492, 1485,
     1494, 1505, 1522, 1501, 1498, 1499, 1510, 1503, 1492, 1495,
     1498, 1506, 1550, 2577, 1553, 1512, 1501, 1515, 1499, 1516,
     2577, 1503, 1543, 1515, 2577, 1503, 1526, 1515, 1522, 1517,
     2577, 1517, 1509, 1510, 1541, 1558, 1532, 1537, 1515, 1532,
     1576, 1541, 1549, 1526, 1534, 1528, 1536, 1554, 1540, 1547,

     1557, 1543, 1549, 1541, 1541, 1539, 1546, 1554, 1546, 1557,
     1556, 1568, 1585, 1586, 1604, 2577, 1607, 1552, 1592, 1564,
     1613, 2577, 1574, 1580, 1615, 1597, 1566, 1585, 1578, 1583,
     1575, 1576, 1578, 1590, 1629, 1582, 1581, 1603, 2577, 1585,
     1575, 1586, 1600, 1588, 1602, 1580, 1586, 1587, 1593, 1589,
     1600, 1601, 1597, 1611, 1619, 1620, 1606, 1611, 1612, 1594,
     1617, 1615, 1619, 1617, 1662, 2577, 1665, 1624, 1629, 1670,
     2577, 1613, 1616, 1614, 1623, 1621, 1627, 1629, 1678, 1639,
     1640, 1630, 1645, 2577, 1645, 1645, 1637, 1645, 1638, 1643,
     1636, 1645, 1638, 1643, 1641, 1646, 1650, 1644, 1662, 1645,

     1648, 1654, 1643, 1644, 1650, 1659, 1667, 1657, 1655, 1663,
     1657, 1665, 1716, 2577, 1659, 1662, 1673, 1674, 1712, 1682,
     1692, 1680, 1669, 2577, 1724, 1725, 1675, 1688, 1700, 1730,
     1702, 1692, 1693, 1679, 1691, 1681, 1693, 1698, 1710, 1688,
     1701, 1713, 1689, 1691, 1706, 1706, 1697, 1698, 1696, 1721,
     1722, 1712, 1704, 1718, 1706, 1720, 1713, 1714, 1723, 1711,
     1759, 1726, 1704, 1724, 1738, 2577, 2577, 1711, 1721, 1709,
     2577, 1710, 1718, 1771, 1718, 1717, 1720, 1719, 1776, 1718,
     1752, 1727, 1721, 1742, 1754, 1740, 1731, 1746, 1747, 1759,
     1730, 1731, 1791, 1746, 1739, 1748, 1741, 1760, 1748, 1744,

     1751, 1751, 1747, 1752, 1751, 1764, 1765, 1777, 1757, 1758,
     1780, 2577, 1770, 1771, 1772, 1773, 2577, 1764, 1779, 1757,
     1781, 1768, 1793, 1761, 1773, 1782, 1823, 1824, 1766, 1776,
     1777, 2577, 1773, 1785, 1775, 1787, 1778, 1785, 1790, 2577,
     1783, 1792, 1797, 1809, 1789, 1811, 1782, 1802, 1803, 1785,
     1816, 1817, 1818, 1819, 1809, 1798, 1801, 1804, 1813, 1805,
     1805, 1820, 1805, 2577, 2577, 1808, 1819, 1820, 1807, 1806,
     1809, 1808, 1821, 1870, 1820, 1828, 1822, 1872, 1814, 1825,
     1816, 1826, 1877, 1878, 1829, 1821, 1823, 1824, 1825, 1885,
     1850, 1847, 1850, 1889, 1837, 1851, 1838, 1840, 1854, 1895,

     1896, 1857, 1858, 1859, 1860, 1852, 1906, 2577, 1857, 1903,
     1859, 2577, 1858, 1857, 1860, 1871, 2577, 2577, 1872, 1863,
     1864, 1865, 1866, 2577, 1871, 1919, 1880, 2577, 1881, 1922,
     1879, 1895, 1925, 2577, 2577, 1897, 1898, 1899, 1900, 1882,
     2577, 1925, 1936, 1895, 1882, 1897, 1938, 1939, 1900, 1901,
     1902, 1903, 1904, 2577, 1916, 1918, 2577, 1899, 1890, 2577,
     1891, 1892, 1893, 1894, 1958, 1953, 1962, 2577, 1961, 1909,
     1963, 2577, 2577, 1964, 1965, 1966, 1967, 1914, 1911, 1922,
     1925, 1924, 1925, 1926, 1927, 1928, 1983, 2577, 1978, 2577,
     1954, 2577, 2577, 2577, 2577, 2577, 1944, 1935, 1940, 1958,

     1948, 1949, 1950, 1951, 1952, 1988, 1936, 1944, 1957, 1958,
     1940, 2000, 2001, 2002, 2003, 2004, 2002, 1956, 1954, 2008,
     1957, 1960, 2577, 2577, 2577, 2577, 2577, 1978, 1972, 1984,
     2577, 1978, 1975, 1993, 2017, 1959, 1971, 2020, 1999, 2577,
     1972, 1985, 2577, 1996, 1985, 1986, 1989, 2028, 2000, 1987,
     2577, 1972, 1992, 1983, 1987, 1995, 2000, 2037, 2037, 2577,
     1995, 1992, 1988, 1988, 2007, 1996, 2007, 2006, 2047, 2577,
     2577, 2053, 2057, 2061, 2065, 2069, 2073, 2076
    } ;

static yyconst flex_int16_t yy_def[2079] =
    {   0,
     2072, 2072, 2073, 2073, 2074, 2074, 2075, 2075, 2071, 2071,
     2071, 2071, 2076, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2077, 2071, 2078, 2071, 2078, 2071, 2071, 2071, 2071,
     2076,   14, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2077, 2078, 2071, 2078, 2071, 2071, 2071,   34, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
        0, 2071, 2071, 2071, 2071, 2071, 2071, 2071
    } ;

static yyconst flex_int16_t yy_nxt[2643] =
    {   0,
     2071,   11,   12,   11, 2071,   13,   11,   12,   11,   20,
       13,   20, 2071,   21,   14,   21,   15,   16, 2071,   14,
     2071,   15,   16,   25,   26,   26,   25,   26,   26,   28,
       28,   28,  231,   28,   28,   28,   27, 2071,  124,   27,
     2071, 2071,   29,   94, 2071,   17,   29,   64,   64,   64,
       17,  125,   59,   64,   65,   65,   91,   97,   60,   95,
     2071,  107,  103,   18, 2071,   96,   92,  104,   18,   28,
       28,   28,  100, 2071,   98,  101,   93,  105,  113,  115,
      108,  121,   29,  122,  232,  155,  106,  114,  110,  127,
      141,   30,  231,  116,  156,   30,   32,   32,   32,   33,

      117,  111,  128,   34,  112,  118,  144,  142,  119,  145,
      732,  120,   35,   36,   37,   38,   39,   40,  733,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   30,   53,   54,   55,   56,   69,   69,   69,   64,
       64,   64,   64,   65,   65,  153,  171,  734,  172,  735,
      154,  736,  328,   70,   71,   72,   73,   74,  157,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,  135,   87,   88,   89,   90,  138,  158,  146,  146,
      146,  136,  148,  148,  148,  151,  151,  151,  160,  165,
      163,  137,  139,  147,  174,  174,  174,  149,  140,  164,

      152,  161,  167,  166,  162,  737,  282,  168,  738,  175,
      169,  176,  216,  170,  178,  178,  178,  181,  181,  181,
      190,  191,  192,  283,  177,  217,  310,  202,  208,  179,
      211,  252,  182,  266,  183,  150,  203,  209,  741,  212,
      253,  311,  213,  334,  180,  742,  267,  184,  240,  241,
      242,  146,  146,  146,  148,  148,  148,  151,  151,  151,
      335,  258,  261,  174,  174,  174,  147,  330,  362,  149,
      259,  262,  152,  331,  263,  178,  178,  178,  175,  181,
      181,  181,  516,  363,  449,  449,  449,  468,  468,  468,
      179,  743,  573,  491,  182,  492,  746,  517,  747,  450,

      748,  546,  469,  547,  493,  749,  494,  574,  495,  543,
      543,  543,  548,  750,  549,  751,  550,  449,  449,  449,
      559,  559,  559,  752,  544,  468,  468,  468,  578,  578,
      578,  753,  450,  754,  755,  560,  583,  583,  583,  615,
      469,  756,  616,  579,  617,  543,  543,  543,  662,  662,
      662,  584,  559,  559,  559,  578,  578,  578,  757,  671,
      544,  580,  672,  663,  673,  758,  759,  560,  760,  585,
      579,  583,  583,  583,  739,  739,  739,  744,  744,  744,
      761,  762,  763,  764,  765,  768,  584,  769,  740,  770,
      771,  745,  766,  766,  766,  662,  662,  662,  772,  773,

      774,  775,  776,  777,  778,  779,  780,  767,  783,  784,
      663,  781,  781,  781,  785,  786,  787,  788,  789,  790,
      791,  792,  793,  794,  795,  796,  782,  797,  798,  799,
      800,  801,  802,  803,  804,  805,  806,  807,  808,  809,
      810,  811,  812,  813,  814,  815,  816,  817,  818,  819,
      820,  821,  822,  823,  824,  825,  826,  827,  828,  829,
      830,  831,  832,  833,  834,  835,  836,  837,  739,  739,
      739,  838,  839,  839,  839,  841,  744,  744,  744,  842,
      842,  842,  740,  843,  844,  845,  840,  846,  847,  848,
      745,  849,  850,  851,  852,  853,  854,  855,  856,  856,

      856,  858,  859,  860,  861,  862,  863,  864,  766,  766,
      766,  865,  866,  857,  867,  868,  869,  870,  871,  872,
      873,  874,  881,  767,  875,  875,  875,  877,  877,  877,
      879,  879,  879,  781,  781,  781,  882,  883,  884,  876,
      885,  886,  878,  889,  892,  880,  893,  894,  782,  887,
      887,  887,  890,  890,  890,  895,  896,  897,  898,  899,
      900,  901,  902,  903,  888,  904,  905,  891,  906,  907,
      908,  909,  910,  911,  912,  913,  914,  915,  916,  919,
      920,  921,  917,  922,  923,  918,  924,  925,  926,  927,
      928,  929,  930,  931,  932,  933,  934,  839,  839,  839,

      935,  935,  935,  937,  936,  842,  842,  842,  951,  843,
      952,  840,  938,  939,  940,  941,  953,  942,  943,  944,
      956,  957,  945,  960,  946,  947,  948,  949,  950,  954,
      954,  954,  958,  958,  958,  961,  962,  963,  963,  963,
      965,  856,  856,  856,  955,  966,  967,  959,  968,  969,
      970,  971,  964,  972,  973,  974,  857,  975,  976,  979,
      980,  981,  977,  982,  983,  978,  984,  875,  875,  875,
      877,  877,  877,  879,  879,  879,  985,  986,  987,  987,
      987,  991,  876,  992,  995,  878,  996,  997,  880,  989,
      989,  989,  998,  988,  887,  887,  887,  993,  993,  993,

      890,  890,  890,  999,  990, 1000, 1001, 1002, 1003,  888,
     1004, 1005,  994, 1006, 1007,  891, 1008, 1009, 1010, 1011,
     1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
     1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
     1031, 1031,  935,  935,  935, 1033,  936, 1034, 1035, 1036,
     1038, 1039, 1037, 1032, 1040, 1041, 1042, 1043, 1046, 1047,
     1050, 1044, 1048, 1052, 1053, 1054, 1045, 1055, 1049,  954,
      954,  954, 1056, 1059, 1051, 1057, 1057, 1057,  958,  958,
      958, 1060, 1061, 1062,  955,  963,  963,  963, 1065, 1066,
     1058, 1067, 1070,  959, 1063, 1063, 1063, 1068, 1068, 1068,

      964, 1071, 1071, 1071, 1073, 1074, 1075, 1076, 1077, 1064,
     1078, 1079, 1069, 1080, 1081, 1082, 1072, 1083, 1084, 1085,
     1086,  987,  987,  987,  989,  989,  989, 1087, 1087, 1087,
     1089, 1089, 1089,  993,  993,  993,  988, 1091, 1092,  990,
     1093, 1094, 1088, 1095, 1096, 1090, 1097, 1098,  994, 1099,
     1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
     1120, 1121, 1031, 1031, 1031, 1122, 1123, 1124, 1125, 1126,
     1127, 1128, 1129, 1130, 1131, 1132, 1032, 1133, 1134, 1135,
     1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,

     1145, 1145, 1057, 1057, 1057, 1148, 1149, 1149, 1149, 1151,
     1151, 1151, 1155, 1158, 1146, 1159, 1160, 1058, 1153, 1153,
     1153, 1150, 1147, 1161, 1152, 1063, 1063, 1063, 1156, 1156,
     1156, 1162, 1163, 1154, 1068, 1068, 1068, 1071, 1071, 1071,
     1064, 1164, 1165, 1157, 1166, 1167, 1167, 1167, 1169, 1069,
     1170, 1171, 1072, 1172, 1173, 1174, 1087, 1087, 1087, 1175,
     1168, 1089, 1089, 1089, 1176, 1177, 1178, 1179, 1180, 1181,
     1182, 1088, 1183, 1184, 1185, 1186, 1090, 1187, 1188, 1189,
     1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
     1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,

     1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1219, 1220,
     1228, 1229, 1221, 1222, 1232, 1223, 1233, 1234, 1224, 1225,
     1235, 1238, 1218, 1226, 1239, 1227, 1230, 1230, 1230, 1145,
     1145, 1145, 1149, 1149, 1149, 1151, 1151, 1151, 1153, 1153,
     1153, 1231, 1244, 1245, 1146, 1246, 1247, 1150, 1248, 1249,
     1152, 1250, 1251, 1154, 1236, 1236, 1236, 1156, 1156, 1156,
     1240, 1240, 1240, 1242, 1242, 1242, 1167, 1167, 1167, 1237,
     1252, 1253, 1157, 1254, 1255, 1241, 1256, 1257, 1243, 1258,
     1259, 1168, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1268,
     1269, 1270, 1271, 1272, 1262, 1273, 1274, 1275, 1276, 1277,

     1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
     1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
     1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1305,
     1230, 1230, 1230, 1308, 1311, 1309, 1312, 1236, 1236, 1236,
     1313, 1313, 1313, 1315, 1316, 1231, 1310, 1240, 1240, 1240,
     1319, 1320, 1237, 1321, 1324, 1314, 1242, 1242, 1242, 1317,
     1317, 1317, 1241, 1322, 1322, 1322, 1325, 1326, 1327, 1327,
     1327, 1243, 1331, 1332, 1318, 1329, 1329, 1329, 1323, 1333,
     1334, 1335, 1336, 1328, 1337, 1338, 1339, 1340, 1341, 1342,
     1330, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,

     1352, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1362,
     1364, 1365, 1366, 1367, 1368, 1363, 1358, 1369, 1370, 1371,
     1372, 1373, 1374, 1375, 1377, 1378, 1379, 1380, 1382, 1383,
     1384, 1385, 1386, 1313, 1313, 1313, 1387, 1387, 1387, 1389,
     1376, 1390, 1381, 1317, 1317, 1317, 1393, 1396, 1314, 1401,
     1402, 1388, 1391, 1391, 1391, 1322, 1322, 1322, 1318, 1394,
     1394, 1394, 1397, 1397, 1397, 1405, 1406, 1392, 1407, 1408,
     1323, 1327, 1327, 1327, 1395, 1409, 1410, 1398, 1329, 1329,
     1329, 1399, 1399, 1399, 1411, 1412, 1328, 1403, 1403, 1403,
     1413, 1414, 1415, 1330, 1416, 1417, 1400, 1418, 1419, 1420,

     1421, 1422, 1404, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
     1430, 1431, 1432, 1433, 1434, 1435, 1436, 1438, 1439, 1440,
     1441, 1442, 1443, 1445, 1446, 1447, 1437, 1448, 1449, 1450,
     1450, 1450, 1452, 1453, 1454, 1455, 1456, 1444, 1387, 1387,
     1387, 1457, 1458, 1459, 1451, 1391, 1391, 1391, 1394, 1394,
     1394, 1466, 1467, 1388, 1397, 1397, 1397, 1399, 1399, 1399,
     1392, 1468, 1469, 1395, 1460, 1460, 1460, 1470, 1471, 1398,
     1472, 1473, 1400, 1462, 1462, 1462, 1403, 1403, 1403, 1461,
     1464, 1464, 1464, 1474, 1475, 1476, 1477, 1478, 1463, 1479,
     1480, 1404, 1481, 1482, 1483, 1465, 1484, 1485, 1486, 1487,

     1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
     1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
     1508, 1450, 1450, 1450, 1509, 1510, 1511, 1512, 1513, 1514,
     1514, 1514, 1516, 1517, 1518, 1519, 1451, 1460, 1460, 1460,
     1462, 1462, 1462, 1520, 1515, 1464, 1464, 1464, 1521, 1522,
     1523, 1524, 1461, 1525, 1526, 1463, 1527, 1528, 1529, 1530,
     1465, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
     1540, 1541, 1542, 1544, 1546, 1547, 1548, 1549, 1550, 1551,
     1552, 1553, 1554, 1555, 1556, 1557, 1543, 1545, 1558, 1560,
     1561, 1562, 1563, 1563, 1563, 1565, 1566, 1567, 1568, 1514,

     1514, 1514, 1569, 1559, 1570, 1571, 1572, 1564, 1573, 1574,
     1575, 1576, 1577, 1578, 1515, 1579, 1580, 1581, 1582, 1583,
     1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
     1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
     1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
     1614, 1563, 1563, 1563, 1615, 1615, 1615, 1617, 1618, 1619,
     1620, 1621, 1622, 1623, 1624, 1625, 1564, 1626, 1627, 1616,
     1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
     1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
     1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,

     1658, 1659, 1660, 1661, 1663, 1615, 1615, 1615, 1665, 1665,
     1665, 1667, 1668, 1669, 1670, 1670, 1670, 1662, 1664, 1672,
     1616, 1673, 1674, 1666, 1675, 1676, 1677, 1678, 1679, 1671,
     1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
     1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,
     1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709,
     1710, 1711, 1712, 1665, 1665, 1665, 1713, 1713, 1713, 1715,
     1716, 1670, 1670, 1670, 1717, 1718, 1719, 1720, 1666, 1721,
     1722, 1714, 1723, 1724, 1725, 1726, 1671, 1727, 1728, 1729,
     1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,

     1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
     1750, 1751, 1752, 1753, 1754, 1755, 1756, 1713, 1713, 1713,
     1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
     1767, 1768, 1714, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
     1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
     1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795,
     1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
     1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
     1816, 1817, 1818, 1819, 1821, 1822, 1820, 1823, 1824, 1825,
     1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,

     1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,
     1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
     1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
     1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
     1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
     1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
     1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905,
     1906, 1907, 1907, 1907, 1909, 1910, 1911, 1912, 1913, 1914,
     1915, 1916, 1917, 1918, 1919, 1920, 1908, 1921, 1922, 1923,
     1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,

     1934, 1935, 1936, 1937, 1938, 1939, 1940, 1907, 1907, 1907,
     1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
     1951, 1952, 1908, 1953, 1954, 1955, 1956, 1957, 1958, 1959,
     1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1967, 1967,
     1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978,
     1979, 1968, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
     1987, 1987, 1989, 1967, 1967, 1967, 1990, 1991, 1992, 1993,
     1994, 1995, 1996, 1997, 1988, 1998, 1999, 1968, 2000, 2001,
     2002, 2003, 2004, 2005, 1987, 1987, 1987, 2006, 2007, 2008,
     2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 1988,

     2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
     2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
     2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047,
     2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
     2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,
     2068, 2069, 2070,   10,   10,   10,   10,   19,   19,   19,
       19,   22,   22,   22,   22,   24,   24,   24,   24,   31,
       31,  731,   31,   62,   62,   62,   63,  730,   63,  729,
      728,  727,  726,  725,  724,  723,  722,  721,  720,  719,
      718,  717,  716,  715,  714,  713,  712,  711,  710,  709,

      708,  707,  706,  705,  704,  703,  702,  701,  700,  699,
      698,  697,  696,  695,  694,  693,  692,  691,  690,  689,
      688,  687,  686,  685,  684,  683,  682,  681,  680,  679,
      678,  677,  676,  675,  674,  670,  669,  668,  667,  666,
      665,  664,  661,  660,  659,  658,  657,  656,  655,  654,
      653,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  626,  625,  624,
      623,  622,  621,  620,  619,  618,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  605,  604,  603,  602,  601,

      600,  599,  598,  597,  596,  595,  594,  593,  592,  591,
      590,  589,  588,  587,  586,  582,  581,  577,  576,  575,
      572,  571,  570,  569,  568,  567,  566,  565,  564,  563,
      562,  561,  558,  557,  556,  555,  554,  553,  552,  551,
      545,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  527,  526,  525,  524,
      523,  522,  521,  520,  519,  518,  515,  514,  513,  512,
      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,

      476,  475,  474,  473,  472,  471,  470,  467,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  457,  456,  455,
      454,  453,  452,  451,  448,  447,  446,  445,  444,  443,
      442,  441,  440,  439,  438,  437,  436,  435,  434,  433,
      432,  431,  430,  429,  428,  427,  426,  425,  424,  423,
      422,  421,  420,  419,  418,  417,  416,  415,  414,  413,
      412,  411,  410,  409,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  398,  397,  396,  395,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,

      372,  371,  370,  369,  368,  367,  366,  365,  364,  361,
      360,  359,  358,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  333,  332,  331,  329,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      316,  315,  314,  313,  312,  309,  308,  307,  306,  305,
      304,  303,  302,  301,  300,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  288,  287,  286,  285,
      284,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  265,  264,  260,  257,  256,

      255,  254,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  239,  238,  237,  236,  235,  234,  233,  230,  229,
      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,
      218,  215,  214,  210,  207,  206,  205,  204,  201,  200,
      199,  198,  197,  196,  195,  194,  193,  189,  188,  187,
      186,  185,  173,  159,  143,  134,  133,  132,  131,  130,
      129,  126,  123,  109,  102,   99,   68,   67,   66,   33,
       61,   58,   57, 2071,   23,   23,    9, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071
    } ;

static yyconst flex_int16_t yy_chk[2643] =
    {   0,
        0,    1,    1,    1,    0,    1,    2,    2,    2,    3,
        2,    4,    0,    3,    1,    4,    1,    1,    0,    2,
        0,    2,    2,    7,    7,    7,    8,    8,    8,   11,
       11,   11,  130,   12,   12,   12,    7,    0,   54,    8,
        0,    0,   11,   37,    0,    1,   12,   25,   25,   25,
        2,   54,   18,   26,   26,   26,   36,   38,   18,   37,
       32,   46,   44,    1,   32,   37,   36,   44,    2,   28,
       28,   28,   40,   32,   38,   40,   36,   45,   49,   50,
       46,   52,   28,   52,  130,   79,   45,   49,   48,   56,
       72,   11,  231,   50,   79,   12,   14,   14,   14,   14,

       51,   48,   56,   14,   48,   51,   74,   72,   51,   74,
      629,   51,   14,   14,   14,   14,   14,   14,  630,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   28,   14,   14,   14,   14,   34,   34,   34,   64,
       64,   64,   65,   65,   65,   78,   86,  631,   86,  632,
       78,  633,  231,   34,   34,   34,   34,   34,   80,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   70,   34,   34,   34,   34,   71,   80,   75,   75,
       75,   70,   76,   76,   76,   77,   77,   77,   82,   84,
       83,   70,   71,   75,   88,   88,   88,   76,   71,   83,

       77,   82,   85,   84,   82,  634,  187,   85,  635,   88,
       85,   88,  116,   85,   89,   89,   89,   90,   90,   90,
       96,   96,   96,  187,   88,  116,  214,  106,  111,   89,
      113,  156,   90,  166,   90,   76,  106,  111,  637,  113,
      156,  214,  113,  237,   89,  638,  166,   90,  140,  140,
      140,  146,  146,  146,  148,  148,  148,  151,  151,  151,
      237,  161,  163,  174,  174,  174,  146,  233,  264,  148,
      161,  163,  151,  233,  163,  178,  178,  178,  174,  181,
      181,  181,  415,  264,  352,  352,  352,  370,  370,  370,
      178,  639,  467,  393,  181,  393,  641,  415,  642,  352,

      643,  443,  370,  443,  393,  644,  393,  467,  393,  441,
      441,  441,  443,  645,  443,  646,  443,  449,  449,  449,
      454,  454,  454,  647,  441,  468,  468,  468,  473,  473,
      473,  648,  449,  649,  650,  454,  476,  476,  476,  507,
      468,  651,  507,  473,  507,  543,  543,  543,  554,  554,
      554,  476,  559,  559,  559,  578,  578,  578,  652,  564,
      543,  473,  564,  554,  564,  653,  654,  559,  655,  476,
      578,  583,  583,  583,  636,  636,  636,  640,  640,  640,
      656,  657,  658,  659,  660,  664,  583,  665,  636,  666,
      667,  640,  661,  661,  661,  662,  662,  662,  668,  669,

      670,  671,  672,  673,  674,  675,  676,  661,  678,  679,
      662,  677,  677,  677,  680,  681,  682,  683,  684,  685,
      686,  687,  688,  689,  690,  691,  677,  692,  693,  694,
      695,  696,  697,  698,  699,  700,  701,  702,  703,  705,
      706,  707,  708,  709,  710,  711,  712,  713,  714,  715,
      716,  717,  718,  719,  720,  721,  725,  726,  727,  728,
      729,  730,  732,  734,  735,  736,  737,  738,  739,  739,
      739,  741,  742,  742,  742,  743,  744,  744,  744,  745,
      745,  745,  739,  745,  746,  747,  742,  748,  749,  750,
      744,  751,  752,  753,  754,  755,  756,  757,  758,  758,

      758,  759,  760,  761,  762,  763,  764,  765,  766,  766,
      766,  768,  769,  758,  770,  771,  772,  773,  774,  775,
      776,  777,  783,  766,  778,  778,  778,  779,  779,  779,
      780,  780,  780,  781,  781,  781,  784,  785,  786,  778,
      787,  788,  779,  790,  792,  780,  793,  794,  781,  789,
      789,  789,  791,  791,  791,  795,  796,  797,  798,  799,
      801,  802,  804,  805,  789,  806,  808,  791,  809,  810,
      811,  812,  813,  814,  815,  816,  817,  818,  819,  820,
      821,  822,  819,  823,  824,  819,  825,  826,  827,  830,
      831,  833,  834,  835,  836,  837,  838,  839,  839,  839,

      840,  840,  840,  841,  840,  842,  842,  842,  844,  842,
      845,  839,  843,  843,  843,  843,  846,  843,  843,  843,
      848,  849,  843,  851,  843,  843,  843,  843,  843,  847,
      847,  847,  850,  850,  850,  852,  853,  854,  854,  854,
      855,  856,  856,  856,  847,  858,  859,  850,  860,  861,
      862,  863,  854,  864,  865,  866,  856,  867,  868,  869,
      870,  871,  868,  872,  873,  868,  874,  875,  875,  875,
      877,  877,  877,  879,  879,  879,  881,  882,  883,  883,
      883,  885,  875,  886,  892,  877,  893,  894,  879,  884,
      884,  884,  895,  883,  887,  887,  887,  889,  889,  889,

      890,  890,  890,  896,  884,  897,  898,  899,  900,  887,
      902,  903,  889,  904,  905,  890,  907,  908,  909,  911,
      913,  914,  915,  916,  917,  918,  919,  920,  921,  922,
      923,  924,  925,  926,  929,  930,  931,  932,  933,  934,
      934,  934,  935,  935,  935,  936,  935,  937,  938,  939,
      940,  941,  939,  934,  942,  943,  944,  945,  946,  947,
      949,  945,  948,  950,  951,  952,  945,  953,  948,  954,
      954,  954,  956,  960,  949,  957,  957,  957,  958,  958,
      958,  961,  962,  965,  954,  963,  963,  963,  967,  968,
      957,  969,  971,  958,  966,  966,  966,  970,  970,  970,

      963,  972,  972,  972,  973,  974,  975,  976,  977,  966,
      978,  979,  970,  980,  981,  982,  972,  983,  984,  985,
      986,  987,  987,  987,  989,  989,  989,  991,  991,  991,
      992,  992,  992,  993,  993,  993,  987,  995,  996,  989,
      997,  998,  991,  999, 1000,  992, 1001, 1002,  993, 1003,
     1004, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
     1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
     1029, 1030, 1031, 1031, 1031, 1033, 1034, 1035, 1036, 1037,
     1038, 1039, 1040, 1041, 1042, 1043, 1031, 1044, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,

     1056, 1056, 1057, 1057, 1057, 1059, 1060, 1060, 1060, 1061,
     1061, 1061, 1065, 1067, 1056, 1070, 1073, 1057, 1062, 1062,
     1062, 1060, 1056, 1074, 1061, 1063, 1063, 1063, 1066, 1066,
     1066, 1075, 1076, 1062, 1068, 1068, 1068, 1071, 1071, 1071,
     1063, 1077, 1078, 1066, 1079, 1080, 1080, 1080, 1081, 1068,
     1082, 1083, 1071, 1084, 1085, 1086, 1087, 1087, 1087, 1091,
     1080, 1089, 1089, 1089, 1092, 1093, 1094, 1095, 1097, 1098,
     1099, 1087, 1100, 1102, 1103, 1106, 1089, 1107, 1108, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,

     1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
     1140, 1141, 1139, 1139, 1143, 1139, 1144, 1147, 1139, 1139,
     1148, 1158, 1137, 1139, 1159, 1139, 1142, 1142, 1142, 1145,
     1145, 1145, 1149, 1149, 1149, 1151, 1151, 1151, 1153, 1153,
     1153, 1142, 1162, 1163, 1145, 1164, 1165, 1149, 1166, 1169,
     1151, 1170, 1171, 1153, 1155, 1155, 1155, 1156, 1156, 1156,
     1160, 1160, 1160, 1161, 1161, 1161, 1167, 1167, 1167, 1155,
     1172, 1173, 1156, 1174, 1175, 1160, 1176, 1177, 1161, 1178,
     1179, 1167, 1180, 1181, 1182, 1183, 1185, 1186, 1188, 1189,
     1190, 1192, 1193, 1194, 1181, 1197, 1198, 1199, 1200, 1201,

     1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
     1212, 1213, 1214, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
     1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1227,
     1230, 1230, 1230, 1232, 1234, 1233, 1235, 1236, 1236, 1236,
     1238, 1238, 1238, 1239, 1244, 1230, 1233, 1240, 1240, 1240,
     1246, 1247, 1236, 1248, 1250, 1238, 1242, 1242, 1242, 1245,
     1245, 1245, 1240, 1249, 1249, 1249, 1251, 1252, 1253, 1253,
     1253, 1242, 1255, 1256, 1245, 1254, 1254, 1254, 1249, 1257,
     1258, 1259, 1260, 1253, 1261, 1262, 1263, 1264, 1266, 1267,
     1254, 1269, 1271, 1274, 1275, 1277, 1278, 1279, 1280, 1281,

     1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
     1292, 1293, 1294, 1295, 1296, 1291, 1287, 1297, 1298, 1299,
     1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
     1310, 1311, 1312, 1313, 1313, 1313, 1315, 1315, 1315, 1316,
     1303, 1319, 1307, 1317, 1317, 1317, 1321, 1325, 1313, 1332,
     1333, 1315, 1320, 1320, 1320, 1322, 1322, 1322, 1317, 1324,
     1324, 1324, 1326, 1326, 1326, 1335, 1337, 1320, 1338, 1339,
     1322, 1327, 1327, 1327, 1324, 1340, 1341, 1326, 1329, 1329,
     1329, 1331, 1331, 1331, 1342, 1343, 1327, 1334, 1334, 1334,
     1344, 1348, 1349, 1329, 1350, 1351, 1331, 1352, 1353, 1354,

     1355, 1356, 1334, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
     1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
     1374, 1375, 1376, 1377, 1378, 1379, 1370, 1380, 1381, 1382,
     1382, 1382, 1383, 1384, 1385, 1386, 1389, 1376, 1387, 1387,
     1387, 1390, 1393, 1396, 1382, 1391, 1391, 1391, 1394, 1394,
     1394, 1406, 1407, 1387, 1397, 1397, 1397, 1399, 1399, 1399,
     1391, 1408, 1409, 1394, 1401, 1401, 1401, 1410, 1412, 1397,
     1413, 1414, 1399, 1402, 1402, 1402, 1403, 1403, 1403, 1401,
     1405, 1405, 1405, 1415, 1416, 1417, 1418, 1419, 1402, 1420,
     1421, 1403, 1422, 1423, 1424, 1405, 1425, 1426, 1427, 1428,

     1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
     1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
     1449, 1450, 1450, 1450, 1452, 1453, 1454, 1455, 1456, 1457,
     1457, 1457, 1458, 1459, 1467, 1468, 1450, 1460, 1460, 1460,
     1462, 1462, 1462, 1469, 1457, 1464, 1464, 1464, 1470, 1471,
     1472, 1473, 1460, 1474, 1475, 1462, 1476, 1477, 1478, 1479,
     1464, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
     1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
     1499, 1500, 1501, 1502, 1503, 1504, 1491, 1492, 1505, 1506,
     1507, 1508, 1509, 1509, 1509, 1510, 1511, 1512, 1513, 1514,

     1514, 1514, 1516, 1505, 1517, 1519, 1520, 1509, 1521, 1522,
     1523, 1524, 1525, 1526, 1514, 1527, 1528, 1529, 1530, 1531,
     1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541,
     1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551,
     1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
     1562, 1563, 1563, 1563, 1565, 1565, 1565, 1566, 1567, 1568,
     1569, 1570, 1572, 1573, 1574, 1576, 1563, 1577, 1578, 1565,
     1579, 1580, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
     1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
     1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609,

     1610, 1611, 1612, 1613, 1614, 1615, 1615, 1615, 1617, 1617,
     1617, 1618, 1619, 1620, 1621, 1621, 1621, 1613, 1614, 1623,
     1615, 1624, 1625, 1617, 1626, 1627, 1628, 1629, 1630, 1621,
     1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1640, 1641,
     1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651,
     1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661,
     1662, 1663, 1664, 1665, 1665, 1665, 1667, 1667, 1667, 1668,
     1669, 1670, 1670, 1670, 1672, 1673, 1674, 1675, 1665, 1676,
     1677, 1667, 1678, 1679, 1680, 1681, 1670, 1682, 1683, 1685,
     1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695,

     1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
     1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1713, 1713,
     1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1725,
     1726, 1727, 1713, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
     1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
     1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
     1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
     1765, 1768, 1769, 1770, 1772, 1773, 1774, 1775, 1776, 1777,
     1778, 1779, 1780, 1781, 1782, 1783, 1781, 1784, 1785, 1786,
     1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,

     1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
     1807, 1808, 1809, 1810, 1811, 1813, 1814, 1815, 1816, 1818,
     1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
     1829, 1830, 1831, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
     1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
     1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
     1861, 1862, 1863, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
     1873, 1874, 1874, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
     1881, 1882, 1883, 1884, 1885, 1886, 1874, 1887, 1888, 1889,
     1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,

     1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1907, 1907,
     1909, 1910, 1911, 1913, 1914, 1915, 1916, 1919, 1920, 1921,
     1922, 1923, 1907, 1925, 1926, 1927, 1929, 1930, 1931, 1932,
     1933, 1936, 1937, 1938, 1939, 1940, 1942, 1943, 1943, 1943,
     1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953,
     1955, 1943, 1956, 1958, 1959, 1961, 1962, 1963, 1964, 1965,
     1965, 1965, 1966, 1967, 1967, 1967, 1969, 1970, 1971, 1974,
     1975, 1976, 1977, 1978, 1965, 1979, 1980, 1967, 1981, 1982,
     1983, 1984, 1985, 1986, 1987, 1987, 1987, 1989, 1991, 1997,
     1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 1987,

     2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
     2017, 2018, 2019, 2020, 2021, 2022, 2028, 2029, 2030, 2032,
     2033, 2034, 2035, 2036, 2037, 2038, 2039, 2041, 2042, 2044,
     2045, 2046, 2047, 2048, 2049, 2050, 2052, 2053, 2054, 2055,
     2056, 2057, 2058, 2059, 2061, 2062, 2063, 2064, 2065, 2066,
     2067, 2068, 2069, 2072, 2072, 2072, 2072, 2073, 2073, 2073,
     2073, 2074, 2074, 2074, 2074, 2075, 2075, 2075, 2075, 2076,
     2076,  628, 2076, 2077, 2077, 2077, 2078,  627, 2078,  626,
      625,  624,  623,  622,  620,  619,  618,  617,  616,  615,
      614,  613,  612,  611,  610,  609,  608,  606,  605,  604,

      603,  602,  601,  600,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  588,  587,  586,  585,  582,
      581,  580,  577,  576,  575,  574,  573,  572,  571,  570,
      569,  568,  567,  566,  565,  563,  562,  561,  558,  557,
      556,  555,  553,  552,  551,  550,  549,  548,  547,  546,
      545,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  527,  526,  525,  524,
      523,  522,  521,  520,  519,  518,  517,  516,  515,  514,
      513,  512,  511,  510,  509,  508,  506,  505,  504,  503,
      502,  501,  500,  498,  497,  496,  495,  494,  493,  492,

      491,  490,  489,  488,  487,  486,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  475,  474,  472,  471,  470,
      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  453,  452,  451,  448,  447,  446,  445,  444,
      442,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  418,  417,  416,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  401,  400,
      399,  398,  397,  396,  395,  394,  392,  390,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  379,  378,

      377,  376,  375,  374,  373,  372,  371,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  355,  354,  353,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  336,
      335,  334,  333,  332,  331,  330,  329,  328,  327,  326,
      325,  324,  323,  322,  321,  320,  319,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  308,  307,  306,  305,
      304,  303,  302,  301,  299,  298,  297,  296,  295,  294,
      293,  292,  291,  290,  289,  288,  287,  286,  285,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,

      273,  272,  271,  270,  269,  268,  267,  266,  265,  263,
      262,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  250,  249,  248,  247,  246,  245,  244,  243,
      242,  241,  240,  239,  238,  236,  235,  234,  232,  230,
      229,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  218,  217,  216,  215,  213,  212,  211,  210,  209,
      208,  207,  206,  205,  204,  203,  202,  201,  200,  199,
      198,  197,  196,  195,  194,  193,  192,  191,  190,  189,
      188,  186,  185,  184,  183,  180,  177,  176,  173,  172,
      171,  170,  169,  168,  167,  165,  164,  162,  160,  159,

      158,  157,  155,  154,  153,  150,  145,  144,  143,  142,
      141,  139,  138,  137,  136,  135,  133,  131,  129,  128,
      127,  126,  125,  124,  123,  122,  121,  120,  119,  118,
      117,  115,  114,  112,  110,  109,  108,  107,  105,  104,
      103,  102,  101,  100,   99,   98,   97,   95,   94,   93,
       92,   91,   87,   81,   73,   68,   66,   61,   60,   59,
       58,   55,   53,   47,   42,   39,   33,   31,   30,   29,
       21,   17,   16,    9,    6,    5, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,

     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

/*

This ignores white space outside of meaningful strings of characters.

*/

#ifdef WIN32
#include <io.h>
#define strdup _strdup
#define fileno _fileno
#define isatty _isatty
#define YY_NO_UNISTD_H
#endif
#include <string.h>          // for strdup
#include "crcl/CRCLCommandInstanceClasses.hh"
#include "crcl/CRCLCommandInstanceYACC.hh"    // for tokens, yylval, etc.

#ifndef NO_ECHO
#define ECHO_IT 1
#else
#define ECHO_IT 0
#endif
#define ECH if (ECHO_IT) ECHO

extern int yyReadData;
extern int yyReadDataList;

#define INITIAL 0
#define COMMENT 1
#define DATA 2
#define DATALIST 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
  if (yyReadData)
    {
      BEGIN(DATA);
      yyReadData = 0;
    }
  else if (yyReadDataList)
    {
      BEGIN(DATALIST);
    }

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2072 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2577 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(COMMENT); /* delete comment start */}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL); /* delete comment end */ }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL);
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{ ECH;
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{ ECH;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ yyReadDataList = 0;
                          unput('<');
			  BEGIN(INITIAL);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{ECH; return ENCODING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ECH; return ENDVERSION;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ECH; return STARTVERSION;}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{ECH; return SCHEMALOCATION;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{ECH; return XMLVERSION;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
{ECH; return ACTUATEJOINTEND;}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
{ECH; return ACTUATEJOINTSTART;}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{ECH; return ANGULARVELOCITYEND;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{ECH; return ANGULARVELOCITYSTART;}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{ECH; return AXIALDISTANCEFREEEND;}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{ECH; return AXIALDISTANCEFREESTART;}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
{ECH; return AXIALDISTANCESCREWEND;}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{ECH; return AXIALDISTANCESCREWSTART;}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
{ECH; return AXISPOINTEND;}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{ECH; return AXISPOINTSTART;}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{ECH; return CRCLCOMMANDINSTANCEEND;}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{ECH; return CRCLCOMMANDINSTANCESTART;}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{ECH; return CRCLCOMMANDEND;}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{ECH; return CRCLCOMMANDSTART;}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{ECH; return CHANGERATEEND;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{ECH; return CHANGERATESTART;}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
{ECH; return COMMANDIDEND;}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
{ECH; return COMMANDIDSTART;}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
{ECH; return CONFIGUREJOINTREPORTEND;}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
{ECH; return CONFIGUREJOINTREPORTSTART;}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{ECH; return COORDINATEDEND;}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{ECH; return COORDINATEDSTART;}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONEND;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONSTART;}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
{ECH; return DWELLTIMEEND;}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
{ECH; return DWELLTIMESTART;}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{ECH; return ENDPOSITIONEND;}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
{ECH; return ENDPOSITIONSTART;}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{ECH; return FORCEEND;}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{ECH; return FORCESTART;}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
{ECH; return FRACTIONEND;}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{ECH; return FRACTIONSTART;}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{ECH; return IEND;}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
{ECH; return ISTART;}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{ECH; return JEND;}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{ECH; return JSTART;}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
{ECH; return JOINTACCELEND;}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{ECH; return JOINTACCELSTART;}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{ECH; return JOINTDETAILSEND;}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{ECH; return JOINTDETAILSSTART;}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{ECH; return JOINTNUMBEREND;}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{ECH; return JOINTNUMBERSTART;}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{ECH; return JOINTPOSITIONEND;}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{ECH; return JOINTPOSITIONSTART;}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{ECH; return JOINTSPEEDEND;}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{ECH; return JOINTSPEEDSTART;}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{ECH; return KEND;}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{ECH; return KSTART;}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{ECH; return LINEARVELOCITYEND;}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{ECH; return LINEARVELOCITYSTART;}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{ECH; return LOWERRIGHTEND;}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{ECH; return LOWERRIGHTSTART;}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{ECH; return MESSAGEEND;}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{ECH; return MESSAGESTART;}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{ECH; return MOMENTEND;}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{ECH; return MOMENTSTART;}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{ECH; return MOVESTRAIGHTEND;}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{ECH; return MOVESTRAIGHTSTART;}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{ECH; return NAMEEND;}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{ECH; return NAMESTART;}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{ECH; return NUMPOSITIONSEND;}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
{ECH; return NUMPOSITIONSSTART;}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{ECH; return ORIENTATIONSTANDARDDEVIATIONEND;}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{ECH; return ORIENTATIONSTANDARDDEVIATIONSTART;}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{ECH; return PARAMETERNAMEEND;}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{ECH; return PARAMETERNAMESTART;}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{ECH; return PARAMETERSETTINGEND;}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{ECH; return PARAMETERSETTINGSTART;}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{ECH; return PARAMETERVALUEEND;}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{ECH; return PARAMETERVALUESTART;}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{ECH; return POINTEND;}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{ECH; return POINTSTART;}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{ECH; return POSITIONSTANDARDDEVIATIONEND;}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
{ECH; return POSITIONSTANDARDDEVIATIONSTART;}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{ECH; return PROGRAMTEXTEND;}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{ECH; return PROGRAMTEXTSTART;}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTNAMEEND;}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTNAMESTART;}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{ECH; return REPORTPOSITIONEND;}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{ECH; return REPORTPOSITIONSTART;}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{ECH; return REPORTTORQUEORFORCEEND;}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{ECH; return REPORTTORQUEORFORCESTART;}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{ECH; return REPORTVELOCITYEND;}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
{ECH; return REPORTVELOCITYSTART;}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{ECH; return RESETALLEND;}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
{ECH; return RESETALLSTART;}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{ECH; return ROTACCELEND;}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{ECH; return ROTACCELSTART;}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
{ECH; return ROTSPEEDEND;}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{ECH; return ROTSPEEDSTART;}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{ECH; return SETTINGEND;}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{ECH; return SETTINGSTART;}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
{ECH; return STARTPOSITIONEND;}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{ECH; return STARTPOSITIONSTART;}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{ECH; return STOPCONDITIONEND;}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{ECH; return STOPCONDITIONSTART;}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{ECH; return TIMESTAMPEND;}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{ECH; return TIMESTAMPSTART;}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{ECH; return TOLERANCEEND;}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{ECH; return TOLERANCESTART;}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{ECH; return TRANSACCELEND;}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{ECH; return TRANSACCELSTART;}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
{ECH; return TRANSSPEEDEND;}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{ECH; return TRANSSPEEDSTART;}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{ECH; return TURNEND;}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{ECH; return TURNSTART;}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
{ECH; return UNITNAMEEND;}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
{ECH; return UNITNAMESTART;}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{ECH; return UPPERLEFTEND;}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
{ECH; return UPPERLEFTSTART;}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
{ECH; return WAYPOINTEND;}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{ECH; return WAYPOINTSTART;}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{ECH; return XAXISTOLERANCEEND;}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
{ECH; return XAXISTOLERANCESTART;}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{ECH; return XAXISEND;}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{ECH; return XAXISSTART;}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
{ECH; return XPOINTTOLERANCEEND;}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
{ECH; return XPOINTTOLERANCESTART;}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{ECH; return XEND;}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{ECH; return XSTART;}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{ECH; return YPOINTTOLERANCEEND;}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{ECH; return YPOINTTOLERANCESTART;}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{ECH; return YEND;}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{ECH; return YSTART;}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISTOLERANCEEND;}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISTOLERANCESTART;}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISEND;}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISSTART;}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{ECH; return ZPOINTTOLERANCEEND;}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{ECH; return ZPOINTTOLERANCESTART;}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
{ECH; return ZEND;}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
{ECH; return ZSTART;}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{ ECH; return ACTUATEJOINTSTYPEDECL; }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{ ECH; return CLOSETOOLCHANGERTYPEDECL; }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
{ ECH; return CONFIGUREJOINTREPORTSTYPEDECL; }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
{ ECH; return DWELLTYPEDECL; }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{ ECH; return ENDCANONTYPEDECL; }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
{ ECH; return GETSTATUSTYPEDECL; }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
{ ECH; return INITCANONTYPEDECL; }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
{ ECH; return JOINTFORCETORQUETYPEDECL; }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
{ ECH; return JOINTSPEEDACCELTYPEDECL; }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
{ ECH; return MESSAGETYPEDECL; }
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
{ ECH; return MIDDLECOMMANDTYPEDECL; }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
{ ECH; return MOVESCREWTYPEDECL; }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
{ ECH; return MOVETHROUGHTOTYPEDECL; }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
{ ECH; return MOVETOTYPEDECL; }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
{ ECH; return OPENTOOLCHANGERTYPEDECL; }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
{ ECH; return POSEANDSETTYPEDECL; }
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
{ ECH; return ROTACCELABSOLUTETYPEDECL; }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
{ ECH; return ROTACCELRELATIVETYPEDECL; }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
{ ECH; return ROTSPEEDABSOLUTETYPEDECL; }
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
{ ECH; return ROTSPEEDRELATIVETYPEDECL; }
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
{ ECH; return RUNPROGRAMTYPEDECL; }
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
{ ECH; return SETANGLEUNITSTYPEDECL; }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
{ ECH; return SETENDEFFECTORPARAMETERSTYPEDECL; }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
{ ECH; return SETENDEFFECTORTYPEDECL; }
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
{ ECH; return SETENDPOSETOLERANCETYPEDECL; }
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
{ ECH; return SETFORCEUNITSTYPEDECL; }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
{ ECH; return SETINTERMEDIATEPOSETOLERANCETYPEDECL; }
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
{ ECH; return SETLENGTHUNITSTYPEDECL; }
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
{ ECH; return SETMOTIONCOORDINATIONTYPEDECL; }
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
{ ECH; return SETROBOTPARAMETERSTYPEDECL; }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
{ ECH; return SETROTACCELTYPEDECL; }
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
{ ECH; return SETROTSPEEDTYPEDECL; }
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
{ ECH; return SETTORQUEUNITSTYPEDECL; }
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
{ ECH; return SETTRANSACCELTYPEDECL; }
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
{ ECH; return SETTRANSSPEEDTYPEDECL; }
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
{ ECH; return STOPMOTIONTYPEDECL; }
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
{ ECH; return TRANSACCELABSOLUTETYPEDECL; }
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
{ ECH; return TRANSACCELRELATIVETYPEDECL; }
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
{ ECH; return TRANSSPEEDABSOLUTETYPEDECL; }
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
{ ECH; return TRANSSPEEDRELATIVETYPEDECL; }
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
{ECH;
                                           return XMLNSPREFIX;}
	YY_BREAK
case 187:
YY_RULE_SETUP
{ECH; return ENDITEM;}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
{ECH;
                            int n;
                            for (n = 1; yytext[n] != '"'; n++);
                            yytext[n] = 0;
                            yylval.sVal = strdup(yytext + 1);
                            return TERMINALSTRING;
                           }
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
{ECH;}
	YY_BREAK
case 190:
YY_RULE_SETUP
{ECH; return BAD;}
	YY_BREAK
case 191:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DATA):
case YY_STATE_EOF(DATALIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2072 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2072 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2071);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int yywrap()
{
  return 1;
}

